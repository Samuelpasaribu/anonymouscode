const encryptedCode = 'KGZ1bmN0aW9uKF8weDFhZjhkNSxfMHg0NWVhNDYpe3ZhciBfMHg0MDQ3ZTQ9XzB4MWFmOGQ1KCk7ZnVuY3Rpb24gXzB4NWM2ODExKF8weDFiYmNjMixfMHgyZjMzYzMsXzB4M2NlOTNkLF8weDU4YWUyMCl7cmV0dXJuIF8weDI1ODkoXzB4M2NlOTNkLSAtMHgzYjcsXzB4MWJiY2MyKTt9ZnVuY3Rpb24gXzB4NGI3ODdjKF8weDNmNWQwZixfMHgxOGM4ZixfMHgyZjYyYTEsXzB4MjJkZjg3KXtyZXR1cm4gXzB4MjU4OShfMHgzZjVkMGYtMHgzMmYsXzB4MThjOGYpO313aGlsZSghIVtdKXt0cnl7dmFyIF8weDMzYjBhZD1wYXJzZUludChfMHg0Yjc4N2MoMHg0OGMsMHg0NzIsMHg0NmUsMHg0OTUpKS8oMHgxZiotMHgyNSstMHgxKi0weDQ4OCstMHhjKStwYXJzZUludChfMHg0Yjc4N2MoMHg0YTQsMHg0YmEsMHg0ODgsMHg0YWUpKS8oLTB4MTBkKjB4YisweDEqMHg4MDUrMHhlMyoweDQpKihwYXJzZUludChfMHg0Yjc4N2MoMHg0OWQsMHg0OGQsMHg0YTMsMHg0YTcpKS8oLTB4ZCotMHgyYSsweDE3NyoweGQrMHg3Ki0weDMwNikpKy1wYXJzZUludChfMHg1YzY4MTEoLTB4MjJhLC0weDI0NywtMHgyMzksLTB4MjJjKSkvKDB4MWEzZSsweDMqLTB4YzAyKzB4OWNjKSstcGFyc2VJbnQoXzB4NWM2ODExKC0weDI1NywtMHgyNTgsLTB4MjVkLC0weDI3NikpLygtMHgxMGQrMHgxKi0weGNlZSsweGUwMCkrLXBhcnNlSW50KF8weDVjNjgxMSgtMHgyNjgsLTB4MjVhLC0weDI1MiwtMHgyMzYpKS8oMHgxKi0weGMyNysweDczKjB4NDIrMHhkNSotMHgxNSkrLXBhcnNlSW50KF8weDVjNjgxMSgtMHgyMzUsLTB4MjJkLC0weDI0YiwtMHgyNjApKS8oMHhhYzgrMHgyMDllKy0weDJiNWYpK3BhcnNlSW50KF8weDVjNjgxMSgtMHgyMzcsLTB4MjQzLC0weDI0ZiwtMHgyNTIpKS8oMHgxKi0weDFiOTErMHg5NyotMHhkKy0weDIqLTB4MTFhMikqKHBhcnNlSW50KF8weDRiNzg3YygweDRiMSwweDRiYywweDQ5MywweDRhZSkpLygtMHhhNSotMHgyMSsweDExNDQrLTB4MjY4MCkpO2lmKF8weDMzYjBhZD09PV8weDQ1ZWE0NilicmVhaztlbHNlIF8weDQwNDdlNFsncHVzaCddKF8weDQwNDdlNFsnc2hpZnQnXSgpKTt9Y2F0Y2goXzB4NzhlNDI3KXtfMHg0MDQ3ZTRbJ3B1c2gnXShfMHg0MDQ3ZTRbJ3NoaWZ0J10oKSk7fX19KF8weDVhODcsMHgxYjYqLTB4N2E1KzB4MTNiNTg5Ki0weDErMHgxKjB4MmQzODJkKSk7dmFyIF8weDJkMzZlMj0oZnVuY3Rpb24oKXtmdW5jdGlvbiBfMHgzODVmMWIoXzB4MTg0ODYzLF8weDE4MWM5YSxfMHgyNTlhNmQsXzB4NDdlZTJkKXtyZXR1cm4gXzB4MjU4OShfMHgxODFjOWEtMHg2NyxfMHgyNTlhNmQpO312YXIgXzB4NDUzNTFlPXt9O18weDQ1MzUxZVtfMHgzODVmMWIoMHgxYmYsMHgxZGQsMHgxYzQsMHgxZDIpXT0nNXwwfDN8Mnw0fCcrJzEnLF8weDQ1MzUxZVtfMHgzODVmMWIoMHgxOWMsMHgxYWYsMHgxOTYsMHgxOTApXT1fMHgzZWNhNGUoMHg1MzQsMHg1NDEsMHg1MjUsMHg1MjIpO3ZhciBfMHhiMDRhZjQ9XzB4NDUzNTFlO2Z1bmN0aW9uIF8weDNlY2E0ZShfMHgyN2RkM2QsXzB4MzU1YzUyLF8weDRhNmM2YixfMHgyNWZkYWIpe3JldHVybiBfMHgyNTg5KF8weDI1ZmRhYi0weDNiZixfMHgyN2RkM2QpO312YXIgXzB4NDg0MzExPSEhW107cmV0dXJuIGZ1bmN0aW9uKF8weDU2ZWM3NyxfMHg3ODBlMzQpe2Z1bmN0aW9uIF8weDQ4YjMyYihfMHgxNzQ2MjEsXzB4M2NlNDNiLF8weDFlZDRlZixfMHgyZjZhYzMpe3JldHVybiBfMHgzODVmMWIoXzB4MTc0NjIxLTB4MTFkLF8weDNjZTQzYi0gLTB4MzY0LF8weDE3NDYyMSxfMHgyZjZhYzMtMHgyNyk7fWZ1bmN0aW9uIF8weDNmZmFiOChfMHgzZjRiZGMsXzB4MzhlOTVlLF8weDUxZTUwOCxfMHhlMmEyY2Qpe3JldHVybiBfMHgzZWNhNGUoXzB4NTFlNTA4LF8weDM4ZTk1ZS0weDE3YyxfMHg1MWU1MDgtMHhiNSxfMHgzZjRiZGMtIC0weDEyYSk7fWlmKF8weGIwNGFmNFsnaHNVdUsnXSE9PV8weDQ4YjMyYigtMHgxYWUsLTB4MTlhLC0weDFhMCwtMHgxODApKXt2YXIgXzB4MTJmZDk4PV8weGIwNGFmNFtfMHg0OGIzMmIoLTB4MTg3LC0weDE4NywtMHgxNzAsLTB4MTljKV1bXzB4M2ZmYWI4KDB4NDBkLDB4M2ZhLDB4M2ZjLDB4NDFkKV0oJ3wnKSxfMHg5OWQ3YTc9LTB4MjNlOSstMHg1KjB4MWIxKy0weGVjYSotMHgzO3doaWxlKCEhW10pe3N3aXRjaChfMHgxMmZkOThbXzB4OTlkN2E3KytdKXtjYXNlJzAnOnZhciBfMHgyYmRkZTM9XzB4MmM0ZTExW18weDViZmQ3OV07Y29udGludWU7Y2FzZScxJzpfMHgzMjUzOGZbXzB4MmJkZGUzXT1fMHgzOGJmMmI7Y29udGludWU7Y2FzZScyJzpfMHgzOGJmMmJbJ19fcHJvdG9fXyddPV8weDI1MWViNltfMHg0OGIzMmIoLTB4MTdkLC0weDE3YSwtMHgxNzEsLTB4MThjKV0oXzB4N2QwN2VkKTtjb250aW51ZTtjYXNlJzMnOnZhciBfMHgxZmNiYjk9XzB4Yzg2YTExW18weDJiZGRlM118fF8weDM4YmYyYjtjb250aW51ZTtjYXNlJzQnOl8weDM4YmYyYlsndG9TdHJpbmcnXT1fMHgxZmNiYjlbXzB4NDhiMzJiKC0weDE3YSwtMHgxOTcsLTB4MTdhLC0weDFhMSldW18weDNmZmFiOCgweDQxOCwweDQxZSwweDQwYiwweDQzMildKF8weDFmY2JiOSk7Y29udGludWU7Y2FzZSc1Jzp2YXIgXzB4MzhiZjJiPV8weDQwNzlhMFtfMHg0OGIzMmIoLTB4MThjLC0weDE5ZiwtMHgxODYsLTB4MThmKSsnciddWydwcm90b3R5cGUnXVtfMHgzZmZhYjgoMHg0MTgsMHgzZjksMHg0MjksMHg0MWUpXShfMHgyMTg1OTkpO2NvbnRpbnVlO31icmVhazt9fWVsc2V7dmFyIF8weDQ3MWU2ZT1fMHg0ODQzMTE/ZnVuY3Rpb24oKXtpZihfMHg3ODBlMzQpe3ZhciBfMHg5OGZmZTE9XzB4NzgwZTM0WydhcHBseSddKF8weDU2ZWM3Nyxhcmd1bWVudHMpO3JldHVybiBfMHg3ODBlMzQ9bnVsbCxfMHg5OGZmZTE7fX06ZnVuY3Rpb24oKXt9O3JldHVybiBfMHg0ODQzMTE9IVtdLF8weDQ3MWU2ZTt9fTt9KCkpLF8weDMwOGNmZT1fMHgyZDM2ZTIodGhpcyxmdW5jdGlvbigpe3ZhciBfMHg1MGFmYTI9e307ZnVuY3Rpb24gXzB4NTUyMDNkKF8weDRlNTY3ZSxfMHg1OGI2NTgsXzB4NGY3NzQ2LF8weDQ2NzU4Myl7cmV0dXJuIF8weDI1ODkoXzB4NGY3NzQ2LTB4MWRmLF8weDRlNTY3ZSk7fWZ1bmN0aW9uIF8weDVhMTMwYihfMHg1ZWMwOWEsXzB4MmI0MDA5LF8weDE0ZmQ0ZCxfMHg0NjMwZWUpe3JldHVybiBfMHgyNTg5KF8weDJiNDAwOS0gLTB4MzQ1LF8weDVlYzA5YSk7fV8weDUwYWZhMltfMHg1NTIwM2QoMHgzNWMsMHgzNTEsMHgzNTEsMHgzMzQpXT1fMHg1NTIwM2QoMHgzNWUsMHgzNjIsMHgzNTYsMHgzNDYpKycrJCc7dmFyIF8weDE3NzE3MD1fMHg1MGFmYTI7cmV0dXJuIF8weDMwOGNmZVtfMHg1NTIwM2QoMHgzMzEsMHgzMzUsMHgzNDUsMHgzNTYpXSgpW18weDVhMTMwYigtMHgxZGUsLTB4MWNhLC0weDFkOSwtMHgxZTUpXShfMHgxNzcxNzBbXzB4NTUyMDNkKDB4MzVhLDB4MzNkLDB4MzUxLDB4MzZmKV0pWyd0b1N0cmluZyddKClbJ2NvbnN0cnVjdG8nKydyJ10oXzB4MzA4Y2ZlKVtfMHg1NTIwM2QoMHgzNWQsMHgzNzUsMHgzNWEsMHgzNTQpXShfMHgxNzcxNzBbXzB4NWExMzBiKC0weDFlMywtMHgxZDMsLTB4MWMxLC0weDFlMCldKTt9KTtmdW5jdGlvbiBfMHg0MmRhMjcoXzB4Zjc3N2QxLF8weDIyYjFhYyxfMHgxMWQ2YjMsXzB4MTBlOTBjKXtyZXR1cm4gXzB4MjU4OShfMHgyMmIxYWMtIC0weDM5OCxfMHgxMGU5MGMpO31fMHgzMDhjZmUoKTtmdW5jdGlvbiBfMHg3ODMwM2YoXzB4M2M4OTliLF8weDM2MmU0NyxfMHgyMTczZTYsXzB4MTI3ZDg2KXtyZXR1cm4gXzB4MjU4OShfMHgzYzg5OWItMHgyZTYsXzB4MzYyZTQ3KTt9dmFyIF8weDFlNmU3NT0oZnVuY3Rpb24oKXtmdW5jdGlvbiBfMHg0ZjEzNTYoXzB4NDVhODRhLF8weDFiMTdkZixfMHg0NzI2MjMsXzB4MzlhYjE4KXtyZXR1cm4gXzB4MjU4OShfMHgzOWFiMTgtIC0weDI5MSxfMHgxYjE3ZGYpO312YXIgXzB4NGI4NGI0PXt9O18weDRiODRiNFtfMHg0ZjEzNTYoLTB4MTNlLC0weDEwYSwtMHgxNDEsLTB4MTI0KV09XzB4MmYxZWE3KC0weDIwLC0weGIsLTB4MTgsLTB4MjMpLF8weDRiODRiNFtfMHgyZjFlYTcoLTB4MTAsLTB4MjIsLTB4MzIsLTB4MjgpXT1mdW5jdGlvbihfMHgyMDBhMWYsXzB4NGI4ZDk1KXtyZXR1cm4gXzB4MjAwYTFmIT09XzB4NGI4ZDk1O30sXzB4NGI4NGI0W18weDRmMTM1NigtMHgxMmEsLTB4MTQzLC0weDE0YywtMHgxMzkpXT1fMHg0ZjEzNTYoLTB4MTMyLC0weDEzMywtMHgxMGEsLTB4MTI2KTt2YXIgXzB4OTk3MDhlPV8weDRiODRiNDtmdW5jdGlvbiBfMHgyZjFlYTcoXzB4MjdjOWM0LF8weDQ3MDQ3LF8weDFjMWZjYixfMHgxZjQxMjYpe3JldHVybiBfMHgyNTg5KF8weDFmNDEyNi0gLTB4MTc1LF8weDQ3MDQ3KTt9dmFyIF8weDE1YzQ2OD0hIVtdO3JldHVybiBmdW5jdGlvbihfMHgyZDI3OTYsXzB4NGI0OWFkKXt2YXIgXzB4NjE1OWM2PXt9O18weDYxNTljNlsnZERYeWInXT1fMHg5OTcwOGVbXzB4MWVlNDlkKC0weDEzOSwtMHgxNDAsLTB4MTNkLC0weDE0NildO3ZhciBfMHg0MDc4NGE9XzB4NjE1OWM2O2Z1bmN0aW9uIF8weDFlZTQ5ZChfMHgzOWI3NDUsXzB4MTJkMDVhLF8weDFjMzA1MSxfMHg1ZWY4MGQpe3JldHVybiBfMHg0ZjEzNTYoXzB4MzliNzQ1LTB4MWJjLF8weDM5Yjc0NSxfMHgxYzMwNTEtMHgxZjAsXzB4NWVmODBkLSAtMHgyMik7fWZ1bmN0aW9uIF8weDI0OGRkYyhfMHg0NmI5Y2UsXzB4MWZjNDQ4LF8weDE3MzU2NCxfMHg0ZmUyY2Mpe3JldHVybiBfMHgyZjFlYTcoXzB4NDZiOWNlLTB4MTNkLF8weDRmZTJjYyxfMHgxNzM1NjQtMHgxMTAsXzB4MTczNTY0LTB4NGIyKTt9aWYoXzB4OTk3MDhlWydaY2NtSyddKCdibmZCUScsXzB4OTk3MDhlW18weDFlZTQ5ZCgtMHgxNjcsLTB4MTU4LC0weDE0ZSwtMHgxNWIpXSkpe3ZhciBfMHg1NTFhZjI9XzB4MTVjNDY4P2Z1bmN0aW9uKCl7ZnVuY3Rpb24gXzB4NTdjMTUzKF8weGE4ZGNiNCxfMHgyYzRhNzEsXzB4NDkzYmVmLF8weDMxMzQwZil7cmV0dXJuIF8weDI0OGRkYyhfMHhhOGRjYjQtMHhlZixfMHgyYzRhNzEtMHgwLF8weDJjNGE3MS0gLTB4MWRhLF8weDMxMzQwZik7fWlmKF8weDRiNDlhZCl7aWYoJ0RWc0NpJz09PV8weDQwNzg0YVsnZERYeWInXSl7dmFyIF8weDNmY2MwMz1fMHg0YjQ5YWRbXzB4NTdjMTUzKDB4MmIyLDB4MmJlLDB4MmE2LDB4MmQxKV0oXzB4MmQyNzk2LGFyZ3VtZW50cyk7cmV0dXJuIF8weDRiNDlhZD1udWxsLF8weDNmY2MwMzt9ZWxzZXt2YXIgXzB4MWQ1MDljPV8weDQxYTc5ZD9mdW5jdGlvbigpe2Z1bmN0aW9uIF8weDU1Yjk5YyhfMHg0ZmU4MjcsXzB4M2E2ODczLF8weDEwMmExZCxfMHhhNWQ0NmQpe3JldHVybiBfMHg1N2MxNTMoXzB4NGZlODI3LTB4YjksXzB4M2E2ODczLSAtMHg0NixfMHgxMDJhMWQtMHgxMmIsXzB4YTVkNDZkKTt9aWYoXzB4NDg2Yzg5KXt2YXIgXzB4MTcwNTNlPV8weDE5ZDdjMVtfMHg1NWI5OWMoMHgyNzUsMHgyNzgsMHgyNjgsMHgyOGYpXShfMHgxNzFhN2EsYXJndW1lbnRzKTtyZXR1cm4gXzB4NTEwNGRlPW51bGwsXzB4MTcwNTNlO319OmZ1bmN0aW9uKCl7fTtyZXR1cm4gXzB4NGRjZmE2PSFbXSxfMHgxZDUwOWM7fX19OmZ1bmN0aW9uKCl7fTtyZXR1cm4gXzB4MTVjNDY4PSFbXSxfMHg1NTFhZjI7fWVsc2V7dmFyIF8weDUxNzBhYT1fMHgzMmNhMjQ/ZnVuY3Rpb24oKXtmdW5jdGlvbiBfMHgyNGNlNzUoXzB4NTE5MzEzLF8weDE0OTIxZCxfMHgzN2ZhMGUsXzB4MzlhY2Y4KXtyZXR1cm4gXzB4MWVlNDlkKF8weDM3ZmEwZSxfMHgxNDkyMWQtMHgxNjAsXzB4MzdmYTBlLTB4MWM3LF8weDE0OTIxZC0gLTB4YjgpO31pZihfMHgxYzczNzIpe3ZhciBfMHgzNDQyYjY9XzB4MzBkOTkzW18weDI0Y2U3NSgtMHgyMWEsLTB4MjEwLC0weDIyZCwtMHgyMjApXShfMHgzNzFkMTEsYXJndW1lbnRzKTtyZXR1cm4gXzB4NTEwYmM0PW51bGwsXzB4MzQ0MmI2O319OmZ1bmN0aW9uKCl7fTtyZXR1cm4gXzB4NDk1Mjk5PSFbXSxfMHg1MTcwYWE7fX07fSgpKSxfMHgyYzlmMWI9XzB4MWU2ZTc1KHRoaXMsZnVuY3Rpb24oKXtmdW5jdGlvbiBfMHg3YmUzYTMoXzB4NDZlNTQ2LF8weDIzZjU5MSxfMHg0NzIwZjIsXzB4NDc0MmYwKXtyZXR1cm4gXzB4MjU4OShfMHgyM2Y1OTEtMHgyMmMsXzB4NDcyMGYyKTt9dmFyIF8weDIwNzEyMj17J1hMS2ZPJzpmdW5jdGlvbihfMHgxYzZmOWEsXzB4M2YwOTI2KXtyZXR1cm4gXzB4MWM2ZjlhPT09XzB4M2YwOTI2O30sJ0JGdGVaJzonQlVPSngnLCduaVVRUSc6ZnVuY3Rpb24oXzB4M2JhM2QyLF8weDIxNGM4Nyl7cmV0dXJuIF8weDNiYTNkMihfMHgyMTRjODcpO30sJ0toS25MJzpmdW5jdGlvbihfMHgzNTI2ZjMsXzB4MjA0MWJmKXtyZXR1cm4gXzB4MzUyNmYzK18weDIwNDFiZjt9LCdSbnhreCc6XzB4N2JlM2EzKDB4MzkzLDB4M2FjLDB4M2JlLDB4MzliKStfMHgxZmIyNjEoMHg0YTIsMHg0ZGQsMHg0Y2YsMHg0YzEpLCdOYUF4aCc6XzB4MWZiMjYxKDB4NGNlLDB4NGI5LDB4NGE3LDB4NGJhKStfMHg3YmUzYTMoMHgzNmUsMHgzODAsMHgzOTEsMHgzOWIpK18weDdiZTNhMygweDM1YSwweDM3OCwweDM2YSwweDM4NikrJ1x4MjApJywnUXNFQUsnOidsb2cnLCdOVldwcSc6XzB4MWZiMjYxKDB4NGUxLDB4NGJiLDB4NGVjLDB4NGQxKSwnemJDUG4nOl8weDFmYjI2MSgweDRkZCwweDRjMSwweDRkZSwweDRjMCksJ25UZlVWJzpfMHgxZmIyNjEoMHg0YTYsMHg0YWQsMHg0YmUsMHg0YmUpLCd5TnJKbic6J3RhYmxlJywnTVJUZFonOmZ1bmN0aW9uKF8weGNjOWQ2OCxfMHgyOTBiNjkpe3JldHVybiBfMHhjYzlkNjg8XzB4MjkwYjY5O319LF8weGEzODM1NjtmdW5jdGlvbiBfMHgxZmIyNjEoXzB4MzM0YjBlLF8weDEzNmE3YSxfMHgyNDBiMTMsXzB4Mjk2OGU0KXtyZXR1cm4gXzB4MjU4OShfMHgyOTY4ZTQtMHgzNzAsXzB4MzM0YjBlKTt9dHJ5e2lmKF8weDIwNzEyMltfMHgxZmIyNjEoMHg0ZWIsMHg0ZDQsMHg0ZDcsMHg0ZDQpXShfMHgyMDcxMjJbXzB4MWZiMjYxKDB4NGYxLDB4NGUzLDB4NGJlLDB4NGQ3KV0sXzB4MjA3MTIyW18weDFmYjI2MSgweDRjZSwweDRjNiwweDRmMCwweDRkNyldKSl7dmFyIF8weDJjNzFiMj1fMHgyMDcxMjJbXzB4MWZiMjYxKDB4NGY4LDB4NGVjLDB4NTAwLDB4NGU0KV0oRnVuY3Rpb24sXzB4MjA3MTIyW18weDFmYjI2MSgweDRjMSwweDRkMywweDRjNSwweDRkMildKF8weDIwNzEyMltfMHgxZmIyNjEoMHg0YzksMHg0YjksMHg0ZWMsMHg0ZDIpXShfMHgyMDcxMjJbXzB4N2JlM2EzKDB4Mzk3LDB4MzgyLDB4Mzg1LDB4MzgxKV0sXzB4MjA3MTIyW18weDdiZTNhMygweDM5NSwweDNhZCwweDNhNCwweDM5OCldKSwnKTsnKSk7XzB4YTM4MzU2PV8weDJjNzFiMigpO31lbHNlIF8weDFmMDdiND1fMHgzOWRkYjk7fWNhdGNoKF8weDIxY2YxMSl7XzB4YTM4MzU2PXdpbmRvdzt9dmFyIF8weDU3MDUwNz1fMHhhMzgzNTZbXzB4MWZiMjYxKDB4NGNiLDB4NGIzLDB4NGI2LDB4NGM3KV09XzB4YTM4MzU2Wydjb25zb2xlJ118fHt9LF8weDI3Nzg0Zj1bXzB4MjA3MTIyW18weDFmYjI2MSgweDRlYywweDRlZCwweDRjNCwweDRkYSldLCd3YXJuJyxfMHgyMDcxMjJbXzB4N2JlM2EzKDB4M2I3LDB4M2E5LDB4M2IzLDB4M2MwKV0sXzB4MjA3MTIyW18weDFmYjI2MSgweDRjYSwweDRlOSwweDRjNywweDRkOSldLF8weDIwNzEyMltfMHgxZmIyNjEoMHg0Y2YsMHg0YzMsMHg0YzQsMHg0YzUpXSxfMHgyMDcxMjJbJ3lOckpuJ10sJ3RyYWNlJ107Zm9yKHZhciBfMHgyZmVkNzA9LTB4MyoweDMxZisweGYxKzB4NDM2KjB4MjtfMHgyMDcxMjJbXzB4N2JlM2EzKDB4M2I1LDB4MzliLDB4MzhiLDB4M2I2KV0oXzB4MmZlZDcwLF8weDI3Nzg0ZltfMHg3YmUzYTMoMHgzYTIsMHgzOGMsMHgzOWEsMHgzNzkpXSk7XzB4MmZlZDcwKyspe3ZhciBfMHgxYTJjNzU9XzB4MWU2ZTc1W18weDFmYjI2MSgweDRiNSwweDRkZiwweDRjMSwweDRjZSkrJ3InXVtfMHg3YmUzYTMoMHgzYWQsMHgzOWMsMHgzOGIsMHgzOGQpXVtfMHgxZmIyNjEoMHg0ZTUsMHg0ZGYsMHg0ZGQsMHg0ZjMpXShfMHgxZTZlNzUpLF8weDQ3MjUyZD1fMHgyNzc4NGZbXzB4MmZlZDcwXSxfMHgzMmM5MjA9XzB4NTcwNTA3W18weDQ3MjUyZF18fF8weDFhMmM3NTtfMHgxYTJjNzVbXzB4MWZiMjYxKDB4NGY5LDB4NGQ5LDB4NGQ1LDB4NGU5KV09XzB4MWU2ZTc1WydiaW5kJ10oXzB4MWU2ZTc1KSxfMHgxYTJjNzVbXzB4MWZiMjYxKDB4NGM2LDB4NGYxLDB4NGJlLDB4NGQ2KV09XzB4MzJjOTIwW18weDFmYjI2MSgweDRmNCwweDRlZSwweDRkYSwweDRkNildW18weDFmYjI2MSgweDRkNSwweDUwMywweDRmYiwweDRmMyldKF8weDMyYzkyMCksXzB4NTcwNTA3W18weDQ3MjUyZF09XzB4MWEyYzc1O319KTtfMHgyYzlmMWIoKTt2YXIgXzB4NWI0OD1bJ2FwaUtleScsJ0FJemFTeUJpeWUnKydPd2JRZVdteUw2JysnMU1yQ1FTNFNqRScrXzB4NDJkYTI3KC0weDI1ZSwtMHgyNGQsLTB4MjVjLC0weDIyZSksXzB4NDJkYTI3KC0weDI0YywtMHgyM2MsLTB4MjMyLC0weDIzYyksJ2Fub255bW91c2MnKydvZGUuZmlyZWJhJytfMHg0MmRhMjcoLTB4MjRkLC0weDIzOSwtMHgyMWIsLTB4MjIxKSxfMHg0MmRhMjcoLTB4MjU2LC0weDI0NSwtMHgyM2QsLTB4MjQ1KSwnYW5vbnltb3VzYycrXzB4NzgzMDNmKDB4NDYyLDB4NDVkLDB4NDdhLDB4NDViKSxfMHg3ODMwM2YoMHg0MzUsMHg0NGIsMHg0M2YsMHg0NGQpKydrZXQnLCdhbm9ueW1vdXNjJytfMHg0MmRhMjcoLTB4MjM4LC0weDI0ZiwtMHgyNDgsLTB4MjYyKStfMHg0MmRhMjcoLTB4MjI2LC0weDIzZiwtMHgyNDUsLTB4MjUyKSwnbWVzc2FnaW5nUycrXzB4NzgzMDNmKDB4NDJkLDB4NDNjLDB4NDQ4LDB4NDIyKSwnMTcwNDg2MTc2NCcrJzY2JywnYXBwSWQnLF8weDQyZGEyNygtMHgyMmYsLTB4MjI3LC0weDIzNywtMHgyMzcpK18weDc4MzAzZigweDQ2MCwweDQ1YiwweDQ0ZiwweDQ0NikrXzB4NDJkYTI3KC0weDIyYSwtMHgyMTksLTB4MjBiLC0weDIzNCkrXzB4NDJkYTI3KC0weDIyNywtMHgyMjUsLTB4MjFhLC0weDIxNCkrJ2InXSxmaXJlYmFzZUNvbmZpZz17fTtmdW5jdGlvbiBfMHg1YTg3KCl7dmFyIF8weDIwMDhjMj1bJ290cTNvZGkybktYTXl3RFFyVycsJ3NLSHR5dTAnLCdtSktZb3RlM3IwbkFDMkxKJywndHZqdXpmTycsJ0NoalZEZzkwRXhiTCcsJ210T1huWmEwb2R5WG5XJywneUxyWHp4dScsJ3pkdVduWnExbk1mSW1hJywnQk1MdnV2ZScsJ21aYmd6MDEzRHZHJywnczJ2YndldScsJ2tjR09sSVNQa1lLUmtxJywnQzNiU0F4cScsJ3gxOVdDTTkwQjE5RicsJ25KcTJuSlAzendpNnlXJywnQzJ2SENNbk8nLCdCMnJMJywndEx6eENoZScsJ250ZTFtSnUwbmZiTXN2SHBxcScsJ210bTVtdEcxeVpuSXpxJywnQ012MER4alVpY0hNRHEnLCd0TWZiRWdHJywnbUpEanRLVFFzdksnLCd5TUxVemEnLCd6dzVLenhqanphJywnQWhudkR1UycsJ0IyckxsTWZXQ2huV0JXJywnRTMwVXkyOVVDM3JZRHEnLCdCZWZkQ3VpMnNaSGYnLCdDTTRHRGdIUENZaVBrYScsJ3dNbkpCdVMnLCd6eEhKenhiMEF3OVUnLCdDM3JWQ01mTnp1ajF5VycsJ3p4allCM2knLCdCTW4wQXc5VWtjS0cnLCdyZnpacTJLJywnQ2hqVkFNdkpEZUxLJywneTNyVkNJR0lDTXYwRHEnLCdCTHJNdnZ5JywndU01NEEzRycsJ3kyOVVDMjlTenEnLCdDdzFmc3VtJywnRGM1SkIyMCcsJ21aeTVuWmk0bWhqZHEwUHdBYScsJ3l4YldCaEsnLCd5eHYwQWVyVkJ3ZlBCRycsJ210bTJuSnVZbndQcEFNbmZyRycsJ3kyOVVDM3JZRHduMEJXJywnQzJ2SENoYVV5MjlUJywnQmd2VXozck8nLCdBdzVNQlcnLCdzMkhsQktXJywnd2ZqdnlLVycsJ3dlWGx6SzgnLCdtSnFab3R5Wm1mSFNCd3ZZdnEnLCdEZzl0RGhqUEJNQycsJ3FLejB6dk8nLCduZENZbmRHV29mbjFCZ1h5enEnLCdFTWpkdWc0JywndXhuZnF1UycsJ3IwVFR0Z08nXTtfMHg1YTg3PWZ1bmN0aW9uKCl7cmV0dXJuIF8weDIwMDhjMjt9O3JldHVybiBfMHg1YTg3KCk7fWZ1bmN0aW9uIF8weDI1ODkoXzB4Njc3YTRhLF8weDQyYWVlNyl7dmFyIF8weDNiODc2MT1fMHg1YTg3KCk7cmV0dXJuIF8weDI1ODk9ZnVuY3Rpb24oXzB4MzZkZGM5LF8weDUwYTg2NSl7XzB4MzZkZGM5PV8weDM2ZGRjOS0oLTB4MWRjZCsweDFlMzMrMHhlMSk7dmFyIF8weGJkNDdlMz1fMHgzYjg3NjFbXzB4MzZkZGM5XTtpZihfMHgyNTg5WydhZ21jZk4nXT09PXVuZGVmaW5lZCl7dmFyIF8weDQ2ZmNmZj1mdW5jdGlvbihfMHgyYThjMGEpe3ZhciBfMHgxYmY2NjM9J2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVowMTIzNDU2Nzg5Ky89Jzt2YXIgXzB4NTY0NTFkPScnLF8weDI4ZDE5NT0nJyxfMHgyYmY2M2Y9XzB4NTY0NTFkK18weDQ2ZmNmZjtmb3IodmFyIF8weDIwYTY4Zj0tMHgyKjB4NzE3Ky0weGMqMHgyMjgrMHgyKjB4MTQwNyxfMHg1MDM2NDEsXzB4MjA0ODI1LF8weDMxZDM2Zj0weGIwMistMHhmYWEqLTB4MSsweDZhYiotMHg0O18weDIwNDgyNT1fMHgyYThjMGFbJ2NoYXJBdCddKF8weDMxZDM2ZisrKTt+XzB4MjA0ODI1JiYoXzB4NTAzNjQxPV8weDIwYTY4ZiUoMHhjYTErLTB4MTlmKi0weDExKy0weDI4MmMpP18weDUwMzY0MSooMHg1NWQqLTB4MSstMHhmNGIrMHg2KjB4MzdjKStfMHgyMDQ4MjU6XzB4MjA0ODI1LF8weDIwYTY4ZisrJSgtMHg5ZSoweDFkKy0weDMqMHg2YjcrMHgyNjBmKSk/XzB4NTY0NTFkKz1fMHgyYmY2M2ZbJ2NoYXJDb2RlQXQnXShfMHgzMWQzNmYrKDB4MWU4ZSotMHgxKy0weGQxMysweDJiYWIpKS0oMHgxKjB4NWE5Ky0weDMqLTB4YjE1KzB4NSotMHg3YzYpIT09LTB4ZjhiKy0weDFlOTkrLTB4MmUyNCotMHgxP1N0cmluZ1snZnJvbUNoYXJDb2RlJ10oLTB4MSotMHgxZTYrMHg4ZTEqLTB4MSsweDdmYSZfMHg1MDM2NDE+PigtKC0weDEqLTB4MjhhKzB4NmUqLTB4NGQrMHgxZThlKSpfMHgyMGE2OGYmLTB4MTI4YysweDQqLTB4MjY3KzB4MSoweDFjMmUpKTpfMHgyMGE2OGY6MHgxMmVhKzB4MWJlZCoweDErLTB4MmVkNyl7XzB4MjA0ODI1PV8weDFiZjY2M1snaW5kZXhPZiddKF8weDIwNDgyNSk7fWZvcih2YXIgXzB4NWE2M2FlPTB4MWUwNisweDE5YWQrLTB4N2Y1KjB4NyxfMHg0ZjI3MDk9XzB4NTY0NTFkWydsZW5ndGgnXTtfMHg1YTYzYWU8XzB4NGYyNzA5O18weDVhNjNhZSsrKXtfMHgyOGQxOTUrPSclJysoJzAwJytfMHg1NjQ1MWRbJ2NoYXJDb2RlQXQnXShfMHg1YTYzYWUpWyd0b1N0cmluZyddKC0weDlmMysweDY2NyoweDUrLTB4NCoweDU4MCkpWydzbGljZSddKC0oMHgxZmU4Ky0weDk5MisweDU5NSotMHg0KSk7fXJldHVybiBkZWNvZGVVUklDb21wb25lbnQoXzB4MjhkMTk1KTt9O18weDI1ODlbJ1hkVE1tdyddPV8weDQ2ZmNmZixfMHg2NzdhNGE9YXJndW1lbnRzLF8weDI1ODlbJ2FnbWNmTiddPSEhW107fXZhciBfMHgzZGIxMTA9XzB4M2I4NzYxWy0weDM2YSsweDFiMGErLTB4MzYqMHg3MF0sXzB4MTU5OTMyPV8weDM2ZGRjOStfMHgzZGIxMTAsXzB4MzkxZjc3PV8weDY3N2E0YVtfMHgxNTk5MzJdO2lmKCFfMHgzOTFmNzcpe3ZhciBfMHg1NDY3OGY9ZnVuY3Rpb24oXzB4MzkwYjE0KXt0aGlzWydFVkhWRVInXT1fMHgzOTBiMTQsdGhpc1snYUJIT2ROJ109Wy0weDFmOTcrMHg4Ki0weDNlOCstMHgyKi0weDFmNmMsLTB4MjM0NystMHg3NDkrMHgyYTkwLDB4MWM1MystMHgxZWQwKzB4MjdkXSx0aGlzWydNVENFTnYnXT1mdW5jdGlvbigpe3JldHVybiduZXdTdGF0ZSc7fSx0aGlzWydIVnJmeHYnXT0nXHg1Y3crXHgyMCpceDVjKFx4NWMpXHgyMCp7XHg1Y3crXHgyMConLHRoaXNbJ3dXZGFieSddPSdbXHgyN3xceDIyXS4rW1x4Mjd8XHgyMl07P1x4MjAqfSc7fTtfMHg1NDY3OGZbJ3Byb3RvdHlwZSddWydIUFZHRVInXT1mdW5jdGlvbigpe3ZhciBfMHg0NTFiNTk9bmV3IFJlZ0V4cCh0aGlzWydIVnJmeHYnXSt0aGlzWyd3V2RhYnknXSksXzB4NDQ5YTNkPV8weDQ1MWI1OVsndGVzdCddKHRoaXNbJ01UQ0VOdiddWyd0b1N0cmluZyddKCkpPy0tdGhpc1snYUJIT2ROJ11bLTB4ZWI0Ky0weDU3KzB4MSoweGYwY106LS10aGlzWydhQkhPZE4nXVstMHg5NyoweDNkKy0weDZkMyoweDIrMHg0ZCoweGE1XTtyZXR1cm4gdGhpc1snaG1nRHVqJ10oXzB4NDQ5YTNkKTt9LF8weDU0Njc4ZlsncHJvdG90eXBlJ11bJ2htZ0R1aiddPWZ1bmN0aW9uKF8weDMxNjUyZSl7aWYoIUJvb2xlYW4ofl8weDMxNjUyZSkpcmV0dXJuIF8weDMxNjUyZTtyZXR1cm4gdGhpc1snV1FsTXFGJ10odGhpc1snRVZIVkVSJ10pO30sXzB4NTQ2NzhmWydwcm90b3R5cGUnXVsnV1FsTXFGJ109ZnVuY3Rpb24oXzB4MTA3OGMzKXtmb3IodmFyIF8weDQ1NTBmYj0tMHgyMWI0Ky0weDFjKjB4MTJjKzB4NDI4NCxfMHg1MzA1MDA9dGhpc1snYUJIT2ROJ11bJ2xlbmd0aCddO18weDQ1NTBmYjxfMHg1MzA1MDA7XzB4NDU1MGZiKyspe3RoaXNbJ2FCSE9kTiddWydwdXNoJ10oTWF0aFsncm91bmQnXShNYXRoWydyYW5kb20nXSgpKSksXzB4NTMwNTAwPXRoaXNbJ2FCSE9kTiddWydsZW5ndGgnXTt9cmV0dXJuIF8weDEwNzhjMyh0aGlzWydhQkhPZE4nXVstMHgyMjVkKy0weDFjY2YrLTB4MjZlKi0weDFhXSk7fSxuZXcgXzB4NTQ2NzhmKF8weDI1ODkpWydIUFZHRVInXSgpLF8weGJkNDdlMz1fMHgyNTg5WydYZFRNbXcnXShfMHhiZDQ3ZTMpLF8weDY3N2E0YVtfMHgxNTk5MzJdPV8weGJkNDdlMzt9ZWxzZSBfMHhiZDQ3ZTM9XzB4MzkxZjc3O3JldHVybiBfMHhiZDQ3ZTM7fSxfMHgyNTg5KF8weDY3N2E0YSxfMHg0MmFlZTcpO31mb3IodmFyIF8weDJiMTNjNj0weDI2YTIqLTB4MSstMHgxOTY5KzB4NDAwYjtfMHgyYjEzYzY8XzB4NWI0OFtfMHg0MmRhMjcoLTB4MjIyLC0weDIzOCwtMHgyMzcsLTB4MjM1KV07XzB4MmIxM2M2Kz0weDExODgrMHg4MzAqMHgxKzB4MTliNiotMHgxKXtmaXJlYmFzZUNvbmZpZ1tfMHg1YjQ4W18weDJiMTNjNl1dPV8weDViNDhbXzB4MmIxM2M2KygtMHgxYzQxKy0weDMyYSstMHgyKi0weGZiNildO30KCi8vIEluaXNpYWxpc2FzaSBGaXJlYmFzZQpmaXJlYmFzZS5pbml0aWFsaXplQXBwKGZpcmViYXNlQ29uZmlnKTsKCi8vIEluaXNpYWxpc2FzaSBGaXJlYmFzZSBTdG9yYWdlCnZhciBzdG9yYWdlID0gZmlyZWJhc2Uuc3RvcmFnZSgpOwp2YXIgc3RvcmFnZVJlZiA9IHN0b3JhZ2UucmVmKCk7CgovLyBJbmlzaWFsaXNhc2kgRmlyZWJhc2UgUmVhbHRpbWUgRGF0YWJhc2UKdmFyIGRhdGFiYXNlID0gZmlyZWJhc2UuZGF0YWJhc2UoKTsKdmFyIGZpbGVzUmVmID0gZGF0YWJhc2UucmVmKCdodG1sLWZpbGVzJyk7CgovLyBJbmlzaWFsaXNhc2kgYXJyYXkgdW50dWsgbWVueWltcGFuIGRhdGEgZmlsZQp2YXIgZmlsZXNEYXRhID0gW107CgovLyBGdW5nc2kgdW50dWsgbWVuZGFwYXRrYW4gdGFuZ2dhbCB0ZXJha2hpciBrYWxpIGRpbW9kaWZpa2FzaSBkYXJpIEZpcmViYXNlIFN0b3JhZ2UKYXN5bmMgZnVuY3Rpb24gZ2V0TGFzdE1vZGlmaWVkKGZpbGVOYW1lKSB7CiAgICB0cnkgewogICAgICAgIGNvbnN0IG1ldGFkYXRhID0gYXdhaXQgc3RvcmFnZVJlZi5jaGlsZCgnaHRtbC1maWxlcy8nICsgZmlsZU5hbWUpLmdldE1ldGFkYXRhKCk7CiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKG1ldGFkYXRhLnVwZGF0ZWQpOwogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBtZXRhZGF0YTonLCBlcnJvcik7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9Cn0KCi8vIFBhbmdnaWwgZnVuZ3NpIGRpc3BsYXlGaWxlc0luVGFibGUgc2FhdCBoYWxhbWFuIGRpbXVhdAp3aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7CiAgICAvLyBEYXBhdGthbiBkYWZ0YXIgZmlsZSBkYXJpIEZpcmViYXNlIFJlYWx0aW1lIERhdGFiYXNlIGRhbiB1cnV0a2FuIGJlcmRhc2Fya2FuIHZpZXdzIHNlY2FyYSBkZXNjZW5kaW5nCiAgICBmaWxlc1JlZi5vcmRlckJ5Q2hpbGQoJ3ZpZXdzJykub24oJ3ZhbHVlJywgZnVuY3Rpb24oc25hcHNob3QpIHsKICAgICAgICAvLyBSZXNldCBkYXRhIGZpbGUgc2ViZWx1bSBtZW5hbWJhaGthbm55YSBrZW1iYWxpCiAgICAgICAgZmlsZXNEYXRhID0gW107CgogICAgICAgIC8vIE1lbnlpbXBhbiBzZW11YSBwcm9taXNlIGdldExhc3RNb2RpZmllZCBkaSBkYWxhbSBhcnJheQogICAgICAgIHZhciBnZXRMYXN0TW9kaWZpZWRQcm9taXNlcyA9IFtdOwoKICAgICAgICAvLyBJdGVyYXRlIG1lbGFsdWkgc2V0aWFwIGZpbGUgZGFyaSBGaXJlYmFzZSBSZWFsdGltZSBEYXRhYmFzZQogICAgICAgIHNuYXBzaG90LmZvckVhY2goZnVuY3Rpb24oY2hpbGRTbmFwc2hvdCkgewogICAgICAgICAgICB2YXIgZmlsZURhdGEgPSBjaGlsZFNuYXBzaG90LnZhbCgpOwogICAgICAgICAgICB2YXIgZmlsZU5hbWUgPSBmaWxlRGF0YS5uYW1lOwogICAgICAgICAgICB2YXIgZmlsZVVSTCA9IGZpbGVEYXRhLnVybDsKICAgICAgICAgICAgdmFyIGZpbGVTaXplID0gZmlsZURhdGEuc2l6ZTsKICAgICAgICAgICAgdmFyIHZpZXdzID0gZmlsZURhdGEudmlld3MgfHwgMDsKCiAgICAgICAgICAgIC8vIERhcGF0a2FuIHRhbmdnYWwgdGVyYWtoaXIga2FsaSBkaW1vZGlmaWthc2kgZGFyaSBGaXJlYmFzZSBTdG9yYWdlCiAgICAgICAgICAgIHZhciBsYXN0TW9kaWZpZWRQcm9taXNlID0gZ2V0TGFzdE1vZGlmaWVkKGZpbGVOYW1lKS50aGVuKGZ1bmN0aW9uKGxhc3RNb2RpZmllZCkgewogICAgICAgICAgICAgICAgLy8gRm9ybWF0IHRhbmdnYWwgdGVyYWtoaXIga2FsaSBkaW1vZGlmaWthc2kKICAgICAgICAgICAgICAgIHZhciBmb3JtYXR0ZWRMYXN0TW9kaWZpZWQgPSBsYXN0TW9kaWZpZWQudG9Mb2NhbGVEYXRlU3RyaW5nKHVuZGVmaW5lZCwgewogICAgICAgICAgICAgICAgICAgIHllYXI6ICdudW1lcmljJywKICAgICAgICAgICAgICAgICAgICBtb250aDogJ2xvbmcnLAogICAgICAgICAgICAgICAgICAgIGRheTogJ251bWVyaWMnLAogICAgICAgICAgICAgICAgICAgIGhvdXI6ICcyLWRpZ2l0JywKICAgICAgICAgICAgICAgICAgICBtaW51dGU6ICcyLWRpZ2l0JywKICAgICAgICAgICAgICAgICAgICBzZWNvbmQ6ICcyLWRpZ2l0JywKICAgICAgICAgICAgICAgICAgICB0aW1lWm9uZU5hbWU6ICdzaG9ydCcKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIC8vIFRhbWJhaGthbiBpbmZvcm1hc2kgZmlsZSBrZSBkYWxhbSBhcnJheQogICAgICAgICAgICAgICAgZmlsZXNEYXRhLnB1c2goewogICAgICAgICAgICAgICAgICAgIG5hbWU6IGZpbGVOYW1lLAogICAgICAgICAgICAgICAgICAgIHVybDogZmlsZVVSTCwKICAgICAgICAgICAgICAgICAgICBzaXplOiBmaWxlU2l6ZSwKICAgICAgICAgICAgICAgICAgICB2aWV3czogdmlld3MsCiAgICAgICAgICAgICAgICAgICAgbGFzdE1vZGlmaWVkOiBmb3JtYXR0ZWRMYXN0TW9kaWZpZWQKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGdldExhc3RNb2RpZmllZFByb21pc2VzLnB1c2gobGFzdE1vZGlmaWVkUHJvbWlzZSk7CiAgICAgICAgfSk7CgogICAgICAgIC8vIFNldGVsYWggc2VtdWEgcHJvbWlzZSBzZWxlc2FpLCBsYW5qdXRrYW4gZGVuZ2FuIG1lbmFtcGlsa2FuIGRhdGEgZGkgdGFiZWwKICAgICAgICBQcm9taXNlLmFsbChnZXRMYXN0TW9kaWZpZWRQcm9taXNlcykudGhlbihmdW5jdGlvbigpIHsKICAgICAgICAgICAgLy8gVXJ1dGthbiBmaWxlc0RhdGEgYmVyZGFzYXJrYW4gdmlld3Mgc2VjYXJhIGRlc2NlbmRpbmcKICAgICAgICAgICAgZmlsZXNEYXRhLnNvcnQoZnVuY3Rpb24oYSwgYikgewogICAgICAgICAgICAgICAgcmV0dXJuIGIudmlld3MgLSBhLnZpZXdzOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIC8vIFRhbXBpbGthbiBmaWxlIGRhbGFtIHRhYmVsIHNldGVsYWggcGVuZ3VydXRhbgogICAgICAgICAgICBkaXNwbGF5RmlsZXNJblRhYmxlKGZpbGVzRGF0YSk7CgogICAgICAgICAgICAvLyBUYW1waWxrYW4gdG90YWwgZmlsZSB5YW5nIHRlbGFoIGRpdXBsb2FkCiAgICAgICAgICAgIGRpc3BsYXlUb3RhbEZpbGVzKGZpbGVzRGF0YS5sZW5ndGgpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGxhc3QgbW9kaWZpZWQgZGF0ZXM6JywgZXJyb3IpOwogICAgICAgIH0pOwogICAgfSk7Cn07CgovLyBGdW5nc2kgdW50dWsgbWVuYW1waWxrYW4gZmlsZSBkYWxhbSB0YWJlbApmdW5jdGlvbiBkaXNwbGF5RmlsZXNJblRhYmxlKGZpbGVzRGF0YSkgewogICAgdmFyIHRhYmxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbGUtdGFibGUnKTsKICAgIC8vIEtvc29uZ2thbiB0YWJlbCBzZWJlbHVtIG1lbmFtYmFoa2FuIGRhdGEgYmFydQogICAgdGFibGUuaW5uZXJIVE1MID0gJyc7CgogICAgLy8gVGFtYmFoa2FuIGp1ZHVsIGtvbG9tCiAgICB2YXIgdGhlYWQgPSB0YWJsZS5jcmVhdGVUSGVhZCgpOwogICAgdmFyIHJvdyA9IHRoZWFkLmluc2VydFJvdygpOwogICAgdmFyIGhlYWRlcnMgPSBbJ05hbWUnLCAnU2l6ZScsICdMaW5rJywgJ1ZpZXdzJywgJ0NyZWF0ZWQnXTsKICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXJUZXh0KSB7CiAgICAgICAgdmFyIHRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGgnKTsKICAgICAgICB0aC50ZXh0Q29udGVudCA9IGhlYWRlclRleHQ7CiAgICAgICAgcm93LmFwcGVuZENoaWxkKHRoKTsKICAgIH0pOwoKICAgIC8vIFRhbWJhaGthbiBkYXRhIGZpbGUga2UgZGFsYW0gdGFiZWwKICAgIGZpbGVzRGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGZpbGVEYXRhKSB7CiAgICAgICAgYWRkRmlsZVRvVGFibGUoZmlsZURhdGEubmFtZSwgZmlsZURhdGEudXJsLCBmaWxlRGF0YS5zaXplLCBmaWxlRGF0YS52aWV3cywgZmlsZURhdGEubGFzdE1vZGlmaWVkKTsKICAgIH0pOwp9CgovLyBFdmVudCBMaXN0ZW5lciB1bnR1ayBtZW5hbmdhbmkgZHJvcCBmaWxlCmRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgaGFuZGxlRmlsZURyb3AoZXZlbnQpOwp9KTsKCi8vIEV2ZW50IExpc3RlbmVyIHVudHVrIG1lbmNlZ2FoIHBlcmlsYWt1IGRlZmF1bHQgcGFkYSBkcmFnIG92ZXIKZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwp9KTsKCi8vIEZ1bmdzaSB1bnR1ayBtZW5hbmdhbmkgZHJvcCBmaWxlCmZ1bmN0aW9uIGhhbmRsZUZpbGVEcm9wKGV2ZW50KSB7CiAgICB2YXIgZmlsZSA9IGV2ZW50LmRhdGFUcmFuc2Zlci5maWxlc1swXTsKCiAgICAvLyBWYWxpZGFzaSBmaWxlIGhhcnVzIGJlcmFraGlyYW4gLmh0bWwKICAgIGlmIChmaWxlLm5hbWUudG9Mb3dlckNhc2UoKS5lbmRzV2l0aCgnLmh0bWwnKSkgewogICAgICAgIHVwbG9hZEZpbGVUb1N0b3JhZ2UoZmlsZSk7CiAgICB9IGVsc2UgewogICAgICAgIHNob3dOb3RpZmljYXRpb24oJ0ZpbGUgaGFydXMgYmVyYWtoaXJhbiAuaHRtbCcpOwogICAgfQp9CgovLyBGdW5nc2kgdW50dWsgbWVuZ3VuZ2dhaCBmaWxlIGtlIEZpcmViYXNlIFN0b3JhZ2UKZnVuY3Rpb24gdXBsb2FkRmlsZVRvU3RvcmFnZShmaWxlKSB7CiAgICAvLyBUYW1waWxrYW4gYW5pbWFzaSBsb2FkaW5nIHNlYmVsdW0gbWVuZ3VuZ2dhaAogICAgc2hvd0xvYWRpbmdBbmltYXRpb24oKTsKCiAgICAvLyBTaW1wYW4gZmlsZSBIVE1MIGtlIEZpcmViYXNlIFN0b3JhZ2UKICAgIHZhciB1cGxvYWRUYXNrID0gc3RvcmFnZVJlZi5jaGlsZCgnaHRtbC1maWxlcy8nICsgZmlsZS5uYW1lKS5wdXQoZmlsZSk7CgogICAgdXBsb2FkVGFzay5vbignc3RhdGVfY2hhbmdlZCcsCiAgICAgICAgZnVuY3Rpb24gcHJvZ3Jlc3Moc25hcHNob3QpIHsKICAgICAgICAgICAgdmFyIHBlcmNlbnRhZ2UgPSAoc25hcHNob3QuYnl0ZXNUcmFuc2ZlcnJlZCAvIHNuYXBzaG90LnRvdGFsQnl0ZXMpICogMTAwOwogICAgICAgICAgICAvLyBQZXJiYXJ1aSBwZXJzZW50YXNlIGRpIGFuaW1hc2kgbG9hZGluZwogICAgICAgICAgICB2YXIgbG9hZGluZ1BlcmNlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9hZGluZy1wZXJjZW50Jyk7CiAgICAgICAgICAgIGxvYWRpbmdQZXJjZW50LmlubmVyVGV4dCA9IHBlcmNlbnRhZ2UudG9GaXhlZCgyKSArICclJzsKICAgICAgICB9LAogICAgICAgIGZ1bmN0aW9uIGVycm9yKGVycm9yKSB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwbG9hZGluZyBmaWxlOicsIGVycm9yKTsKICAgICAgICAgICAgLy8gU2VtYnVueWlrYW4gYW5pbWFzaSBqaWthIHRlcmphZGkga2VzYWxhaGFuCiAgICAgICAgICAgIGhpZGVMb2FkaW5nQW5pbWF0aW9uKCk7CiAgICAgICAgfSwKICAgICAgICBmdW5jdGlvbiBjb21wbGV0ZSgpIHsKICAgICAgICAgICAgLy8gRmlsZSBiZXJoYXNpbCBkaXVuZ2dhaCwgQW5kYSBkYXBhdCBtZW5hbWJhaGthbm55YSBrZSBkYXRhYmFzZSBhdGF1IG1lbmdhbWJpbCBVUkwKICAgICAgICAgICAgLy8gbGFsdSBtZW5hbXBpbGthbm55YSBkYWxhbSB0YWJlbAoKICAgICAgICAgICAgLy8gRGFwYXRrYW4gVVJMIGZpbGUgeWFuZyBkaXVuZ2dhaAogICAgICAgICAgICB1cGxvYWRUYXNrLnNuYXBzaG90LnJlZi5nZXREb3dubG9hZFVSTCgpLnRoZW4oZnVuY3Rpb24oZG93bmxvYWRVUkwpIHsKICAgICAgICAgICAgICAgIC8vIENlayBhcGFrYWggZmlsZSBkZW5nYW4gbmFtYSB5YW5nIHNhbWEgc3VkYWggYWRhIGRpIEZpcmViYXNlIFJlYWx0aW1lIERhdGFiYXNlCiAgICAgICAgICAgICAgICBmaWxlc1JlZi5vcmRlckJ5Q2hpbGQoJ25hbWUnKS5lcXVhbFRvKGZpbGUubmFtZSkub25jZSgndmFsdWUnLCBmdW5jdGlvbihzbmFwc2hvdCkgewogICAgICAgICAgICAgICAgICAgIGlmICghc25hcHNob3QuZXhpc3RzKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWVuZ3VrdXIgdWt1cmFuIGZpbGUKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVTaXplID0gZm9ybWF0Qnl0ZXMoZmlsZS5zaXplKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEppa2EgYmVsdW0gYWRhLCB0YW1iYWhrYW4gaW5mb3JtYXNpIGZpbGUga2UgRmlyZWJhc2UgUmVhbHRpbWUgRGF0YWJhc2UKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVEYXRhID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZmlsZS5uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBkb3dubG9hZFVSTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IGZpbGVTaXplLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3M6IDAgLy8gSW5pc2lhbGlzYXNpIGp1bWxhaCB2aWV3cyBrZSAwCiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzUmVmLnB1c2goZmlsZURhdGEpLnRoZW4oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZW1idW55aWthbiBhbmltYXNpIGxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVMb2FkaW5nQW5pbWF0aW9uKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGFtcGlsa2FuIG5vdGlmaWthc2kKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dOb3RpZmljYXRpb24oJ0ZpbGUgYmVyaGFzaWwgZGl1bmdnYWggZGFuIGRhcGF0IGRpY2FyaSBiZXJkYXNhcmthbiBuYW1hIGZpbGUuJyk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVsb2FkIGhhbGFtYW4gc2V0ZWxhaCBub3RpZmlrYXNpIGRpdHV0dXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAyMDAwKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFkZGluZyBmaWxlIGRhdGE6JywgZXJyb3IpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBTZW1idW55aWthbiBhbmltYXNpIGxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgaGlkZUxvYWRpbmdBbmltYXRpb24oKTsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGFtcGlsa2FuIG5vdGlmaWthc2kKICAgICAgICAgICAgICAgICAgICAgICAgc2hvd05vdGlmaWNhdGlvbignRmlsZSBkZW5nYW4gbmFtYSB5YW5nIHNhbWEgc3VkYWggYWRhLicpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICApOwp9CgovLyBGdW5nc2kgdW50dWsgbWVuYW1iYWhrYW4gaW5mb3JtYXNpIGZpbGUga2UgZGFsYW0gdGFiZWwKZnVuY3Rpb24gYWRkRmlsZVRvVGFibGUoZmlsZU5hbWUsIGZpbGVVUkwsIGZpbGVTaXplLCB2aWV3cywgbGFzdE1vZGlmaWVkKSB7CiAgICB2YXIgdGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsZS10YWJsZScpOwogICAgdmFyIG5ld1JvdyA9IHRhYmxlLmluc2VydFJvdygpOwogICAgdmFyIGNlbGwxID0gbmV3Um93Lmluc2VydENlbGwoMCk7CiAgICB2YXIgY2VsbDIgPSBuZXdSb3cuaW5zZXJ0Q2VsbCgxKTsKICAgIHZhciBjZWxsMyA9IG5ld1Jvdy5pbnNlcnRDZWxsKDIpOwogICAgdmFyIGNlbGw0ID0gbmV3Um93Lmluc2VydENlbGwoMyk7CiAgICB2YXIgY2VsbDUgPSBuZXdSb3cuaW5zZXJ0Q2VsbCg0KTsKCiAgICBjZWxsMS5pbm5lckhUTUwgPSAnPGEgaHJlZj0iIyIgY2xhc3M9ImZpbGUtbGluayI+JyArIHRydW5jYXRlRmlsZU5hbWUoZmlsZU5hbWUsIDIwKSArICc8L2E+JzsKICAgIGNlbGwyLmlubmVySFRNTCA9IGZpbGVTaXplOwogICAgdmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7CiAgICBsaW5rLmhyZWYgPSBmaWxlVVJMOwogICAgbGluay50YXJnZXQgPSAnX2JsYW5rJzsKICAgIGxpbmsudGV4dENvbnRlbnQgPSAnT3Blbic7CiAgICBjZWxsMy5hcHBlbmRDaGlsZChsaW5rKTsKICAgIGNlbGw0LmlubmVySFRNTCA9IHZpZXdzOwoKICAgIC8vIFRhbXBpbGthbiB0YW5nZ2FsIHRlcmFraGlyIGthbGkgZGltb2RpZmlrYXNpCiAgICBjZWxsNS5pbm5lckhUTUwgPSBsYXN0TW9kaWZpZWQ7CgogICAgLy8gVGFtYmFoa2FuIGV2ZW50IGxpc3RlbmVyIHVudHVrIG1lbmFtcGlsa2FuIGRldGFpbCBmaWxlIHNhYXQgbmFtYSBmaWxlIGRpa2xpawogICAgY2VsbDEuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldmVudCkgewogICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgc2hvd0ZpbGVEZXRhaWwoZmlsZU5hbWUsIGxhc3RNb2RpZmllZCk7CiAgICB9KTsKCiAgICAvLyBUYW1iYWhrYW4gZXZlbnQgbGlzdGVuZXIgdW50dWsgbWVuZ2hpdHVuZyBqdW1sYWgga2xpawogICAgbGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICB2YXIgY2xpY2tlZEZpbGVOYW1lID0gZmlsZU5hbWU7CgogICAgICAgIGZpbGVzUmVmLm9yZGVyQnlDaGlsZCgnbmFtZScpLmVxdWFsVG8oY2xpY2tlZEZpbGVOYW1lKS5vbmNlKCd2YWx1ZScsIGZ1bmN0aW9uKHNuYXBzaG90KSB7CiAgICAgICAgICAgIGlmIChzbmFwc2hvdC5leGlzdHMoKSkgewogICAgICAgICAgICAgICAgdmFyIGZpbGVLZXkgPSBPYmplY3Qua2V5cyhzbmFwc2hvdC52YWwoKSlbMF07CiAgICAgICAgICAgICAgICB2YXIgdmlld0NvdW50ID0gKHNuYXBzaG90LnZhbCgpW2ZpbGVLZXldLnZpZXdzIHx8IDApICsgMTsKCiAgICAgICAgICAgICAgICAvLyBTaW1wYW4ganVtbGFoIHZpZXdzIHlhbmcgdGVsYWggZGl0aW5na2F0a2FuIGtlbWJhbGkga2UgRmlyZWJhc2UgUmVhbHRpbWUgRGF0YWJhc2UKICAgICAgICAgICAgICAgIGZpbGVzUmVmLmNoaWxkKGZpbGVLZXkpLnVwZGF0ZSh7CiAgICAgICAgICAgICAgICAgICAgdmlld3M6IHZpZXdDb3VudAogICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAvLyBQZXJiYXJ1aSB0YW1waWxhbiBqdW1sYWggdmlld3MKICAgICAgICAgICAgICAgICAgICBjZWxsNC50ZXh0Q29udGVudCA9IHZpZXdDb3VudDsKCiAgICAgICAgICAgICAgICAgICAgLy8gUmVmcmVzaCBoYWxhbWFuIHNhYXQganVtbGFoIHZpZXdzIHRlbGFoIGRpcGVyYmFydWkKICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3BlbihsaW5rLmhyZWYsICdfYmxhbmsnKTsgLy8gQnVrYSB0YXV0YW4gZGFsYW0gdGFiIGJhcnUKICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7IC8vIFJlbG9hZCBoYWxhbWFuCiAgICAgICAgICAgICAgICAgICAgfSwgMTAwMCk7CiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnJvcikgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIHZpZXdzOicsIGVycm9yKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9KTsKfQoKKGZ1bmN0aW9uKF8weDI1NzY2YSxfMHgxMjdjMjIpe2Z1bmN0aW9uIF8weDI1MTU3YyhfMHgxY2VjZjQsXzB4NzljYjQ3LF8weDExYjQ0MSxfMHg0NzE0ZDYpe3JldHVybiBfMHgyOGZiKF8weDFjZWNmNC0gLTB4OTUsXzB4NzljYjQ3KTt9ZnVuY3Rpb24gXzB4NTZhYmQ4KF8weDI5N2Q3YSxfMHg0OTk2NzUsXzB4ZTNmY2FjLF8weDU3ZDJlMSl7cmV0dXJuIF8weDI4ZmIoXzB4ZTNmY2FjLTB4MTdhLF8weDQ5OTY3NSk7fWNvbnN0IF8weDI3OTY2YT1fMHgyNTc2NmEoKTt3aGlsZSghIVtdKXt0cnl7Y29uc3QgXzB4MmE5N2FjPXBhcnNlSW50KF8weDI1MTU3YygweDExZCwweDEwNCwweDE0YywweGZhKSkvKDB4MjZlYSstMHg0OGIqMHgxKy0weDIyNWUpKigtcGFyc2VJbnQoXzB4MjUxNTdjKDB4MTMzLDB4MTVlLDB4MTNjLDB4MTY2KSkvKDB4YTE5Ky0weGIzZCsweDEyNikpK3BhcnNlSW50KF8weDI1MTU3YygweDE2MSwweDE1MSwweDE5NiwweDE3YikpLygweDEzZjIrLTB4MTcqMHgyZSstMHg1KjB4MzI5KSooLXBhcnNlSW50KF8weDU2YWJkOCgweDM5YSwweDM2MywweDM3MSwweDM1NikpLygtMHgyYzUrLTB4ZThmKzB4MTE1OCkpKy1wYXJzZUludChfMHg1NmFiZDgoMHgzNTgsMHgzMzAsMHgzNTIsMHgzNTUpKS8oMHgyNioweDY2KzB4NzY2KzB4MTY4NSotMHgxKSstcGFyc2VJbnQoXzB4MjUxNTdjKDB4MTMxLDB4MTMyLDB4MTRlLDB4MTU3KSkvKDB4MTNlKjB4MTcrLTB4MSoweDhlZSstMHgxMzllKStwYXJzZUludChfMHg1NmFiZDgoMHgzOTMsMHgzOTksMHgzODYsMHgzOGYpKS8oMHg2Ki0weDMyMystMHgxMzJjKzB4MjYwNSkqKC1wYXJzZUludChfMHg1NmFiZDgoMHgzNjgsMHgzM2IsMHgzNjIsMHgzMzcpKS8oMHhkMyotMHgyNistMHgxYjgwKy0weDEyKi0weDM0NSkpKy1wYXJzZUludChfMHgyNTE1N2MoMHgxMTMsMHgxMzcsMHgxMDQsMHhlZikpLygtMHgzKjB4MWMxKy0weDFlY2MrMHgxYyoweDE0YSkqKC1wYXJzZUludChfMHgyNTE1N2MoMHgxNDYsMHgxNWQsMHgxMzMsMHgxMzIpKS8oMHhhZTcrMHg0Ki0weDY4YystMHgxKi0weGY1MykpK3BhcnNlSW50KF8weDI1MTU3YygweDEzMiwweDEwNywweDE0OCwweDE0NCkpLygweDliZCsweDI2YjMrLTB4MSoweDMwNjUpO2lmKF8weDJhOTdhYz09PV8weDEyN2MyMilicmVhaztlbHNlIF8weDI3OTY2YVsncHVzaCddKF8weDI3OTY2YVsnc2hpZnQnXSgpKTt9Y2F0Y2goXzB4YWYzYjAyKXtfMHgyNzk2NmFbJ3B1c2gnXShfMHgyNzk2NmFbJ3NoaWZ0J10oKSk7fX19KF8weDYzMDEsMHgyKjB4MmQxZCstMHhiMGEwKzB4MTg5MioweDRkKSk7Y29uc3QgdGFyZ2V0RG9tYWluPV8weDE4MTA5NCgweDMxNywweDM0ZiwweDMyZSwweDMxYikrXzB4ZGY0MmE4KC0weGY2LC0weGNkLC0weGRhLC0weGU2KSsnbSc7ZnVuY3Rpb24gXzB4MTgxMDk0KF8weDEwZjNmMCxfMHg1NThkNGQsXzB4MTdkODA3LF8weDMxMjJkNSl7cmV0dXJuIF8weDI4ZmIoXzB4MTdkODA3LTB4MTJlLF8weDEwZjNmMCk7fWZ1bmN0aW9uIGNyZWF0ZUFsZXJ0Qm94KF8weDM0ZDExMyl7Y29uc3QgXzB4M2FkZmRhPXsnaHB2c1MnOl8weDRmZWQwNSgtMHgxNWUsLTB4MTJiLC0weDE1OSwtMHgxNDYpLCdMb3pTdCc6ZnVuY3Rpb24oXzB4Mjk1M2MzLF8weDNiYmNmZil7cmV0dXJuIF8weDI5NTNjMz09PV8weDNiYmNmZjt9LCdodUp2Wic6XzB4NGZlZDA1KC0weDEwNCwtMHgxMzQsLTB4MTNjLC0weDEzMCksJ0JnRXR1JzpfMHg0ZmVkMDUoLTB4ZWQsLTB4MTE4LC0weDE0MCwtMHhlZikrJyskJywna3NBeGMnOmZ1bmN0aW9uKF8weDEzMWEzNyxfMHg0N2JlMzEpe3JldHVybiBfMHgxMzFhMzcoXzB4NDdiZTMxKTt9LCdRWFB1dSc6ZnVuY3Rpb24oXzB4NTJmNzA5LF8weDI4OTRiZSl7cmV0dXJuIF8weDUyZjcwOStfMHgyODk0YmU7fSwnRmNkY3AnOl8weDNiOWE3NCgweDQ2LDB4NjYsMHg1MSwweDg2KStfMHg0ZmVkMDUoLTB4MTFhLC0weDE0YiwtMHgxNmYsLTB4MTc4KSwnQVRUVEEnOl8weDNiOWE3NCgweDMzLDB4MmMsMHgyZiwweDU3KStfMHg0ZmVkMDUoLTB4MTZmLC0weDE0OSwtMHgxNmMsLTB4MTE5KStfMHg0ZmVkMDUoLTB4MWFmLC0weDE3YSwtMHgxOTEsLTB4MTUzKSsnXHgyMCknLCdvVlZ1byc6ZnVuY3Rpb24oXzB4MjIwMDY3LF8weDE0NTJhMCl7cmV0dXJuIF8weDIyMDA2NytfMHgxNDUyYTA7fSwnTmRSbkYnOl8weDNiOWE3NCgweDU2LDB4YywweDMyLC0weDEpLCdCS2RHRSc6ZnVuY3Rpb24oXzB4NDE2NmMwKXtyZXR1cm4gXzB4NDE2NmMwKCk7fSwnb215YmsnOl8weDRmZWQwNSgtMHgxMzYsLTB4MTVhLC0weDEzZSwtMHgxMzcpLCdGU1V2bic6J3dhcm4nLCdYYnZScSc6J2luZm8nLCdRcmZDaSc6XzB4NGZlZDA1KC0weDExZiwtMHgxMmYsLTB4MTBlLC0weDE0NyksJ0dtWkFEJzpfMHgzYjlhNzQoMHg1OSwweDViLDB4N2EsMHg4ZCksJ3dkeklzJzpfMHg0ZmVkMDUoLTB4MTZjLC0weDE0MSwtMHgxMTgsLTB4MTViKSwnWlN5YlEnOmZ1bmN0aW9uKF8weDQ3MGEyZixfMHgxZjljZGUpe3JldHVybiBfMHg0NzBhMmY8XzB4MWY5Y2RlO30sJ2hUR1lwJzonR0ZsU3QnLCdOZEl5ZSc6XzB4M2I5YTc0KDB4NzIsMHg1ZiwweDZjLDB4NzEpLCdUa2Jqayc6XzB4NGZlZDA1KC0weDExOCwtMHgxMzUsLTB4MTBkLC0weDE0OCksJ05OQURlJzonaHR0cHM6Ly9hbicrXzB4NGZlZDA1KC0weDFhNCwtMHgxNzUsLTB4MTQ4LC0weDE1ZikrXzB4M2I5YTc0KDB4OTQsMHgzOSwweDYwLDB4OTApLCdlYVFTdSc6ZnVuY3Rpb24oXzB4MzViODQ4LF8weDFhMzY0ZSxfMHg1ZjNjNTEpe3JldHVybiBfMHgzNWI4NDgoXzB4MWEzNjRlLF8weDVmM2M1MSk7fSwnWVh6alonOmZ1bmN0aW9uKF8weDUxNWNmMil7cmV0dXJuIF8weDUxNWNmMigpO30sJ09GZkRlJzpmdW5jdGlvbihfMHg1NmUyYmQsXzB4NTc2YzMxLF8weDE4N2FjNil7cmV0dXJuIF8weDU2ZTJiZChfMHg1NzZjMzEsXzB4MTg3YWM2KTt9LCdQa0NqVSc6ZnVuY3Rpb24oXzB4M2M0NjUwKXtyZXR1cm4gXzB4M2M0NjUwKCk7fSwnWG5vV0MnOl8weDRmZWQwNSgtMHgxNzEsLTB4MTdlLC0weDE3MiwtMHgxODQpLCdDdGRrZCc6J2ZpeGVkJywnYm1rTVAnOl8weDNiOWE3NCgweGFhLDB4YTUsMHg3ZCwweDdmKSwnZWdTZEcnOic1MCUnLCdsV0dYbCc6XzB4M2I5YTc0KDB4NjIsMHg1MywweDNkLDB4NjUpLCd5UkN6Yyc6XzB4M2I5YTc0KDB4NTQsMHg0MiwweDc0LDB4NTApK18weDRmZWQwNSgtMHgxNTYsLTB4MTM3LC0weDE0YSwtMHgxMDUpLCdFb0lWQyc6XzB4M2I5YTc0KDB4NTEsMHgzZiwweDZiLDB4NWYpLCdSY2dZUic6XzB4M2I5YTc0KDB4NmEsMHgzMywweDYyLDB4NDkpLCdNamh6Tic6JzBceDIwMnB4XHgyMDRweFx4MjAnK18weDNiOWE3NCgweDg4LDB4NDYsMHg1ZSwweDhmKStfMHg0ZmVkMDUoLTB4MTA0LC0weDEyMywtMHhmMSwtMHgxM2MpLCdweHJ2cCc6XzB4NGZlZDA1KC0weDFhYywtMHgxNzksLTB4MTU3LC0weDE3Yil9LF8weDQ3NzRlMj0oZnVuY3Rpb24oKXtsZXQgXzB4M2YyYTZlPSEhW107cmV0dXJuIGZ1bmN0aW9uKF8weDVlM2ZjNixfMHgyMTZjN2Qpe2Z1bmN0aW9uIF8weDEyMDg2YihfMHgxYTU3YmUsXzB4MWEzMWRhLF8weDVkOTRmOCxfMHg1YTUxODIpe3JldHVybiBfMHgyOGZiKF8weDFhNTdiZS0weGU3LF8weDVkOTRmOCk7fWNvbnN0IF8weGMyYzVmMj17J0tsQ2R1JzpmdW5jdGlvbihfMHgyODAyMjgsXzB4MmNmZjA5KXtyZXR1cm4gXzB4MjgwMjI4PT09XzB4MmNmZjA5O30sJ05GQlBJJzpfMHgzYWRmZGFbJ2hwdnNTJ10sJ1JVWWJ6JzpmdW5jdGlvbihfMHhjNzM4OTIsXzB4MjFkOGQzKXtmdW5jdGlvbiBfMHgyNzljNGIoXzB4NTY2MWUwLF8weDMwN2NiYixfMHgyNGI2NjYsXzB4MzJjZmQ2KXtyZXR1cm4gXzB4MjhmYihfMHgyNGI2NjYtIC0weDI1MixfMHgzMmNmZDYpO31yZXR1cm4gXzB4M2FkZmRhW18weDI3OWM0YigtMHhjYywtMHhhZCwtMHg5OCwtMHg5ZildKF8weGM3Mzg5MixfMHgyMWQ4ZDMpO30sJ1NPaUpaJzpfMHgzYWRmZGFbXzB4MTIwODZiKDB4MjlmLDB4MmNkLDB4MmE2LDB4MmQyKV19LF8weDM4ZWVlMz1fMHgzZjJhNmU/ZnVuY3Rpb24oKXtmdW5jdGlvbiBfMHgxODc3MmUoXzB4MWY1Y2QzLF8weDUzMDYxMCxfMHg0NWQ4NjUsXzB4NTM3NjU2KXtyZXR1cm4gXzB4MTIwODZiKF8weDFmNWNkMy0gLTB4MzAyLF8weDUzMDYxMC0weDJmLF8weDUzMDYxMCxfMHg1Mzc2NTYtMHgzYSk7fWZ1bmN0aW9uIF8weDI2Y2ZjMyhfMHg0YmIzM2UsXzB4Mzg1MjBmLF8weDVjMGU1YixfMHgyYmI5NDkpe3JldHVybiBfMHgxMjA4NmIoXzB4NWMwZTViLTB4MWI3LF8weDM4NTIwZi0weGNlLF8weDJiYjk0OSxfMHgyYmI5NDktMHgxNzkpO31pZihfMHhjMmM1ZjJbXzB4MjZjZmMzKDB4NDc2LDB4NDVlLDB4NDg0LDB4NGIxKV0oXzB4MjZjZmMzKDB4NDZjLDB4NDk1LDB4NDliLDB4NDdkKSxfMHhjMmM1ZjJbXzB4MTg3NzJlKC0weDNiLC0weDJkLC0weDZiLC0weDI3KV0pKXtpZihfMHgyMTZjN2Qpe2lmKF8weGMyYzVmMltfMHgxODc3MmUoLTB4NWIsLTB4NmIsLTB4OGEsLTB4MmMpXShfMHhjMmM1ZjJbJ1NPaUpaJ10sXzB4MTg3NzJlKC0weDE5LDB4YywtMHgxMywweDE0KSkpe2NvbnN0IF8weDU2MzNkYz1fMHgzNmMwYjFbJ2FwcGx5J10oXzB4MzM4ZjI4LGFyZ3VtZW50cyk7cmV0dXJuIF8weDEzMDkyND1udWxsLF8weDU2MzNkYzt9ZWxzZXtjb25zdCBfMHg1MTcyMzE9XzB4MjE2YzdkW18weDI2Y2ZjMygweDQ2MSwweDQ3NywweDQ2ZiwweDQzYyldKF8weDVlM2ZjNixhcmd1bWVudHMpO3JldHVybiBfMHgyMTZjN2Q9bnVsbCxfMHg1MTcyMzE7fX19ZWxzZXtjb25zdCBfMHgxYzZkNTg9XzB4MzM5Mjc1P2Z1bmN0aW9uKCl7aWYoXzB4ZTVjZDMyKXtjb25zdCBfMHg1NjI2Zjc9XzB4NGFhMjQxWydhcHBseSddKF8weDIzYzcwYSxhcmd1bWVudHMpO3JldHVybiBfMHgxNmNjOTg9bnVsbCxfMHg1NjI2Zjc7fX06ZnVuY3Rpb24oKXt9O3JldHVybiBfMHgyMzMyZDk9IVtdLF8weDFjNmQ1ODt9fTpmdW5jdGlvbigpe307cmV0dXJuIF8weDNmMmE2ZT0hW10sXzB4MzhlZWUzO307fSgpKSxfMHg2NzE3OWE9XzB4M2FkZmRhW18weDNiOWE3NCgweGYsMHgyZiwweDQ0LDB4NDIpXShfMHg0Nzc0ZTIsdGhpcyxmdW5jdGlvbigpe2Z1bmN0aW9uIF8weDIzNjA0NihfMHgxODUyYmUsXzB4YzY2YmEzLF8weDMwOGY3ZSxfMHg1N2Y1MzIpe3JldHVybiBfMHgzYjlhNzQoXzB4NTdmNTMyLF8weGM2NmJhMy0weDFlNixfMHgxODUyYmUtIC0weDFjYSxfMHg1N2Y1MzItMHhmMSk7fWZ1bmN0aW9uIF8weDE1ZWEyOShfMHhmMTQxNTQsXzB4M2RiMDZiLF8weDdmZjc4YixfMHgzMDkxMzEpe3JldHVybiBfMHgzYjlhNzQoXzB4M2RiMDZiLF8weDNkYjA2Yi0weGI1LF8weDMwOTEzMS0gLTB4MTlkLF8weDMwOTEzMS0weDFkMSk7fXJldHVybiBfMHg2NzE3OWFbXzB4MjM2MDQ2KC0weDE1MSwtMHgxNjIsLTB4MTRmLC0weDE2MyldKClbXzB4MTVlYTI5KC0weDE4ZSwtMHgxOGQsLTB4MTU4LC0weDE4MCldKF8weDNhZGZkYVtfMHgyMzYwNDYoLTB4MTZmLC0weDE2YSwtMHgxNGIsLTB4MTZkKV0pW18weDIzNjA0NigtMHgxNTEsLTB4MTI2LC0weDE2YiwtMHgxN2IpXSgpW18weDIzNjA0NigtMHgxNTQsLTB4MTI1LC0weDE1MywtMHgxNmIpKydyJ10oXzB4NjcxNzlhKVtfMHgxNWVhMjkoLTB4MWI1LC0weDE3YywtMHgxNGQsLTB4MTgwKV0oXzB4M2FkZmRhW18weDIzNjA0NigtMHgxNmYsLTB4MTQ0LC0weDE0NSwtMHgxNjIpXSk7fSk7XzB4M2FkZmRhWydZWHpqWiddKF8weDY3MTc5YSk7Y29uc3QgXzB4MzJmOWQ0PShmdW5jdGlvbigpe2xldCBfMHgxMTU4ODc9ISFbXTtyZXR1cm4gZnVuY3Rpb24oXzB4MjlkMTJhLF8weDMxYjI3OCl7Y29uc3QgXzB4MTE0ZDA3PV8weDExNTg4Nz9mdW5jdGlvbigpe2lmKF8weDMxYjI3OCl7Y29uc3QgXzB4NDg5MzFlPV8weDMxYjI3OFsnYXBwbHknXShfMHgyOWQxMmEsYXJndW1lbnRzKTtyZXR1cm4gXzB4MzFiMjc4PW51bGwsXzB4NDg5MzFlO319OmZ1bmN0aW9uKCl7fTtyZXR1cm4gXzB4MTE1ODg3PSFbXSxfMHgxMTRkMDc7fTt9KCkpLF8weDU5YTM2Yj1fMHgzYWRmZGFbJ09GZkRlJ10oXzB4MzJmOWQ0LHRoaXMsZnVuY3Rpb24oKXtjb25zdCBfMHgzMjZkNGU9e307XzB4MzI2ZDRlW18weDIwYmJiNSgweDEzMywweDEyNCwweDEzNywweDE1MildPV8weDNhZGZkYVsnQmdFdHUnXTtmdW5jdGlvbiBfMHg5YmU2YTkoXzB4MTk5MGY2LF8weDMwNTUzOCxfMHhhNmNmYTIsXzB4Mzk0MTk4KXtyZXR1cm4gXzB4NGZlZDA1KF8weDE5OTBmNi0weDE5YyxfMHgxOTkwZjYtMHgyOTQsXzB4YTZjZmEyLTB4MThjLF8weDM5NDE5OCk7fWNvbnN0IF8weDMzMGJhYT1fMHgzMjZkNGU7ZnVuY3Rpb24gXzB4MjBiYmI1KF8weGViMDM3ZSxfMHgyOTkyZGMsXzB4NTA5MDc4LF8weDViNDViOSl7cmV0dXJuIF8weDRmZWQwNShfMHhlYjAzN2UtMHgxZGIsXzB4NTA5MDc4LTB4MmI2LF8weDUwOTA3OC0weDE2OCxfMHhlYjAzN2UpO31pZihfMHgzYWRmZGFbJ0xvelN0J10oXzB4M2FkZmRhW18weDIwYmJiNSgweDE3NSwweDE4OCwweDE5NiwweDFiYSldLF8weDNhZGZkYVtfMHg5YmU2YTkoMHgxNzQsMHgxNGQsMHgxODMsMHgxOGYpXSkpe2NvbnN0IF8weDI3YmRlMT1mdW5jdGlvbigpe2Z1bmN0aW9uIF8weDUxMGU2NyhfMHgxMWMzN2YsXzB4MjViYWQ1LF8weDU2YTJhNSxfMHhhYzAwNmQpe3JldHVybiBfMHgyMGJiYjUoXzB4YWMwMDZkLF8weDI1YmFkNS0weGU1LF8weDU2YTJhNS0weDI1NSxfMHhhYzAwNmQtMHg5ZCk7fWxldCBfMHgyNDUwNmU7ZnVuY3Rpb24gXzB4NGJjODViKF8weDFiNjA5MyxfMHgyZDkxNjcsXzB4ODcyYWE2LF8weDVlZDQ5Zil7cmV0dXJuIF8weDliZTZhOShfMHgyZDkxNjctIC0weDMyMyxfMHgyZDkxNjctMHgxM2YsXzB4ODcyYWE2LTB4MTc3LF8weDVlZDQ5Zik7fXRyeXtfMHgyNDUwNmU9XzB4M2FkZmRhW18weDUxMGU2NygweDM5MywweDNkMywweDNiMiwweDM4MSldKEZ1bmN0aW9uLF8weDNhZGZkYVtfMHg1MTBlNjcoMHgzZGMsMHg0MDIsMHgzZDAsMHgzOWIpXShfMHgzYWRmZGFbXzB4NTEwZTY3KDB4M2YyLDB4M2VlLDB4M2QwLDB4M2NkKV0oXzB4M2FkZmRhWydGY2RjcCddLF8weDNhZGZkYVtfMHg1MTBlNjcoMHgzYzksMHgzZTIsMHgzZGIsMHgzZmIpXSksJyk7JykpKCk7fWNhdGNoKF8weDVhOTI4Mil7XzB4MjQ1MDZlPXdpbmRvdzt9cmV0dXJuIF8weDI0NTA2ZTt9LF8weDViM2I1MT1fMHgzYWRmZGFbXzB4OWJlNmE5KDB4MTRmLDB4MTVlLDB4MTIyLDB4MTNmKV0oXzB4MjdiZGUxKSxfMHgzZDFhNTA9XzB4NWIzYjUxW18weDIwYmJiNSgweDEyNywweDEyMiwweDE1MywweDEyNCldPV8weDViM2I1MVtfMHgyMGJiYjUoMHgxNjMsMHgxNGYsMHgxNTMsMHgxMmQpXXx8e30sXzB4NGE0YmU1PVtfMHgzYWRmZGFbXzB4MjBiYmI1KDB4MTZiLDB4MWFiLDB4MTk5LDB4MTczKV0sXzB4M2FkZmRhW18weDIwYmJiNSgweDE1NiwweDExZiwweDEzNSwweDEzNCldLF8weDNhZGZkYVtfMHg5YmU2YTkoMHgxNWIsMHgxOTAsMHgxODEsMHgxNDApXSxfMHgzYWRmZGFbXzB4OWJlNmE5KDB4MTE4LDB4MTQzLDB4ZjEsMHgxMmQpXSxfMHgzYWRmZGFbXzB4OWJlNmE5KDB4MTFkLDB4ZjUsMHgxNTEsMHgxMmYpXSxfMHg5YmU2YTkoMHgxNjYsMHgxOWMsMHgxODUsMHgxNGMpLF8weDNhZGZkYVtfMHg5YmU2YTkoMHgxN2QsMHgxYTcsMHgxOGEsMHgxODMpXV07Zm9yKGxldCBfMHgxYzU3YWY9LTB4MTA2MistMHgzKjB4YTk2KzB4MzAyNDtfMHgzYWRmZGFbXzB4MjBiYmI1KDB4MTRhLDB4MTZiLDB4MTY4LDB4MTc4KV0oXzB4MWM1N2FmLF8weDRhNGJlNVtfMHgyMGJiYjUoMHgxYjUsMHgxY2IsMHgxOWQsMHgxYjMpXSk7XzB4MWM1N2FmKyspe2lmKF8weDNhZGZkYVtfMHgyMGJiYjUoMHgxMWIsMHgxN2EsMHgxNDgsMHgxM2YpXShfMHgzYWRmZGFbXzB4OWJlNmE5KDB4MTJkLDB4MTEyLDB4MTUzLDB4MTI1KV0sXzB4M2FkZmRhW18weDliZTZhOSgweDEyZCwweDExYSwweDE1NywweDEzMCldKSl7Y29uc3QgXzB4YzI4MDk1PV8weDMyZjlkNFtfMHg5YmU2YTkoMHgxNzIsMHgxNGQsMHgxNDQsMHgxN2QpKydyJ11bXzB4OWJlNmE5KDB4MTIxLDB4MTIxLDB4MTNmLDB4MTRhKV1bXzB4MjBiYmI1KDB4MTYxLDB4MTg2LDB4MTZjLDB4MThhKV0oXzB4MzJmOWQ0KSxfMHgyY2Q5MGI9XzB4NGE0YmU1W18weDFjNTdhZl0sXzB4MWRkZDMyPV8weDNkMWE1MFtfMHgyY2Q5MGJdfHxfMHhjMjgwOTU7XzB4YzI4MDk1W18weDIwYmJiNSgweDE4YywweDE2NiwweDE3NywweDE4ZCldPV8weDMyZjlkNFtfMHgyMGJiYjUoMHgxOTksMHgxNTQsMHgxNmMsMHgxNDIpXShfMHgzMmY5ZDQpLF8weGMyODA5NVtfMHg5YmU2YTkoMHgxNzUsMHgxNTEsMHgxNWIsMHgxOTcpXT1fMHgxZGRkMzJbXzB4MjBiYmI1KDB4MTY0LDB4MWEyLDB4MTk3LDB4MTljKV1bXzB4OWJlNmE5KDB4MTRhLDB4MTFlLDB4MTI3LDB4MTNiKV0oXzB4MWRkZDMyKSxfMHgzZDFhNTBbXzB4MmNkOTBiXT1fMHhjMjgwOTU7fWVsc2UgcmV0dXJuIF8weDE3MTNiNFsndG9TdHJpbmcnXSgpW18weDliZTZhOSgweDExOSwweGVmLDB4ZmQsMHgxMTcpXSh3bE1jUUpbXzB4OWJlNmE5KDB4MTE1LDB4MTAwLDB4ZTEsMHgxMzgpXSlbXzB4OWJlNmE5KDB4MTc1LDB4MWE1LDB4MTQ2LDB4MTZlKV0oKVsnY29uc3RydWN0bycrJ3InXShfMHgxNmQ2ODApWydzZWFyY2gnXShfMHgyMGJiYjUoMHgxYjAsMHgxYjksMHgxOWUsMHgxYjIpKycrJCcpO319ZWxzZXtsZXQgXzB4NTY5MzFiO3RyeXtfMHg1NjkzMWI9XzB4ZGUwMjI2KFdYTWpRUltfMHgyMGJiYjUoMHgxMTMsMHgxMTUsMHgxNDUsMHgxNWQpXShXWE1qUVJbXzB4OWJlNmE5KDB4MTIzLDB4ZmMsMHgxMzYsMHhmNSldKFdYTWpRUltfMHg5YmU2YTkoMHgxMmEsMHgxMTgsMHgxNGIsMHgxMjUpXSxXWE1qUVJbXzB4OWJlNmE5KDB4MTY0LDB4MTRmLDB4MTNkLDB4MTZmKV0pLCcpOycpKSgpO31jYXRjaChfMHgyNzJiMmUpe18weDU2OTMxYj1fMHg0MzkyOTQ7fXJldHVybiBfMHg1NjkzMWI7fX0pO18weDNhZGZkYVtfMHgzYjlhNzQoMHgyNSwweDNjLDB4MjQsMHgzZSldKF8weDU5YTM2Yik7ZnVuY3Rpb24gXzB4M2I5YTc0KF8weDQwYjkxZCxfMHgyZjYxMjgsXzB4M2E3Zjc0LF8weDFhNjEzZCl7cmV0dXJuIF8weDE4MTA5NChfMHg0MGI5MWQsXzB4MmY2MTI4LTB4NGQsXzB4M2E3Zjc0LSAtMHgyYmUsXzB4MWE2MTNkLTB4MTVmKTt9ZnVuY3Rpb24gXzB4NGZlZDA1KF8weDRjNWQ0ZixfMHgyNTQ3MTgsXzB4M2Y4ZjQ2LF8weDVkMWQ4Myl7cmV0dXJuIF8weGRmNDJhOChfMHg0YzVkNGYtMHgyMyxfMHgyNTQ3MTgtMHgxZCxfMHgyNTQ3MTgtIC0weDYyLF8weDVkMWQ4Myk7fWNvbnN0IF8weDUwYTZlZj1kb2N1bWVudFtfMHgzYjlhNzQoMHg2MiwweDc1LDB4NDYsMHg1YykrXzB4NGZlZDA1KC0weDE3NCwtMHgxNzgsLTB4MTUzLC0weDE3MildKF8weDRmZWQwNSgtMHgxMjUsLTB4MTRjLC0weDE1ZSwtMHgxMzkpKTtfMHg1MGE2ZWZbJ3NldEF0dHJpYnUnKyd0ZSddKCdpZCcsXzB4M2FkZmRhW18weDRmZWQwNSgtMHgxNWMsLTB4MTRmLC0weDE0YywtMHgxNzgpXSksXzB4NTBhNmVmW18weDRmZWQwNSgtMHgxNzQsLTB4MTZiLC0weDE3YiwtMHgxOWEpXVsncG9zaXRpb24nXT1fMHgzYWRmZGFbXzB4NGZlZDA1KC0weDEyMCwtMHgxNDQsLTB4MTQ4LC0weDEzNCldLF8weDUwYTZlZltfMHg0ZmVkMDUoLTB4MTg2LC0weDE2YiwtMHgxN2YsLTB4MTc2KV1bXzB4M2I5YTc0KDB4OGQsMHhhMSwweDc3LDB4ODYpXT1fMHgzYWRmZGFbJ2Jta01QJ10sXzB4NTBhNmVmW18weDNiOWE3NCgweDQ0LDB4MWEsMHgyZCwweDgpXVtfMHg0ZmVkMDUoLTB4MTQ1LC0weDE0MywtMHgxNDksLTB4MTNkKV09XzB4M2FkZmRhWydlZ1NkRyddLF8weDUwYTZlZltfMHgzYjlhNzQoMHgzYSwweDE4LDB4MmQsMHg1OCldW18weDRmZWQwNSgtMHgxMDgsLTB4MTNlLC0weDEyMSwtMHgxMTIpXT1fMHgzYjlhNzQoMHg1NSwweDQwLDB4NTIsMHgzMSkrXzB4NGZlZDA1KC0weDEzNiwtMHgxNWYsLTB4MTM4LC0weDEzNSksXzB4NTBhNmVmW18weDRmZWQwNSgtMHgxNWQsLTB4MTZiLC0weDE3MywtMHgxN2QpXVsnYmFja2dyb3VuZCcrJ0NvbG9yJ109XzB4M2FkZmRhW18weDRmZWQwNSgtMHgxNDcsLTB4MTY1LC0weDE1MSwtMHgxODApXSxfMHg1MGE2ZWZbXzB4NGZlZDA1KC0weDE1MSwtMHgxNmIsLTB4MTQ4LC0weDE0ZildW18weDRmZWQwNSgtMHgxMWMsLTB4MTUxLC0weDE0ZSwtMHgxMWQpXT1fMHgzYWRmZGFbJ3lSQ3pjJ10sXzB4NTBhNmVmWydzdHlsZSddW18weDRmZWQwNSgtMHhlZCwtMHgxMWEsLTB4MTQ5LC0weGZlKSsndXMnXT1fMHgzYWRmZGFbXzB4NGZlZDA1KC0weDE3NCwtMHgxNjQsLTB4MTcwLC0weDE3OSldLF8weDUwYTZlZltfMHgzYjlhNzQoMHhlLDB4MjksMHgyZCwweGEpXVtfMHgzYjlhNzQoMHgzOCwweDZmLDB4NDIsMHg0NyldPV8weDNhZGZkYVtfMHg0ZmVkMDUoLTB4MWExLC0weDE2ZCwtMHgxNDEsLTB4MTc5KV0sXzB4NTBhNmVmW18weDNiOWE3NCgweDM5LDB4NGMsMHgyZCwweDI3KV1bXzB4M2I5YTc0KDB4NjAsMHg1NiwweDNiLDB4MzQpXT1fMHgzYWRmZGFbJ01qaHpOJ10sXzB4NTBhNmVmW18weDNiOWE3NCgweDE4LDB4MzIsMHgyZCwweDE1KV1bXzB4NGZlZDA1KC0weDEzZCwtMHgxMjksLTB4MTJhLC0weDEyZSldPV8weDNhZGZkYVtfMHg0ZmVkMDUoLTB4MTI1LC0weDEyNywtMHhmYiwtMHgxMDIpXSxfMHg1MGE2ZWZbJ2lubmVySFRNTCddPV8weDRmZWQwNSgtMHgxNWYsLTB4MTVjLC0weDE5MiwtMHgxOGEpKydSSU5HQVRBTiE8JysnL3N0cm9uZz5ceDIwJytfMHgzNGQxMTMsZG9jdW1lbnRbXzB4M2I5YTc0KDB4OGQsMHg2ZCwweDY1LDB4NTApXVtfMHg0ZmVkMDUoLTB4MTJiLC0weDE1ZSwtMHgxMzEsLTB4MTdhKSsnZCddKF8weDUwYTZlZiksc2V0VGltZW91dCgoKT0+e2Z1bmN0aW9uIF8weGFjMzljYyhfMHgzYzRhMzYsXzB4NDBmYmM2LF8weDI4OTE1YixfMHg3YmY1ODIpe3JldHVybiBfMHgzYjlhNzQoXzB4N2JmNTgyLF8weDQwZmJjNi0weDFiZixfMHgzYzRhMzYtIC0weGE3LF8weDdiZjU4Mi0weDFlNik7fWZ1bmN0aW9uIF8weDU5ZmI0NihfMHgxZWQ2ZGQsXzB4MjkwNGRmLF8weDFlYjhlNCxfMHgzNzJlN2Mpe3JldHVybiBfMHg0ZmVkMDUoXzB4MWVkNmRkLTB4N2EsXzB4MWVkNmRkLTB4MzRjLF8weDFlYjhlNC0weGYxLF8weDFlYjhlNCk7fV8weDNhZGZkYVtfMHhhYzM5Y2MoLTB4N2QsLTB4NTksLTB4NmEsLTB4NTApXShfMHgzYWRmZGFbXzB4YWMzOWNjKC0weDdiLC0weDY2LC0weDgyLC0weDY2KV0sXzB4M2FkZmRhWydUa2JqayddKT9fMHg0MGM4OWU9XzB4NGVmZTVlOihkb2N1bWVudFsnYm9keSddWydyZW1vdmVDaGlsJysnZCddKF8weDUwYTZlZiksd2luZG93W18weGFjMzljYygtMHg4MSwtMHhiNiwtMHg5ZCwtMHg5NSldW18weGFjMzljYygtMHg4YywtMHg1NywtMHg2OSwtMHg2ZSldPV8weDNhZGZkYVtfMHg1OWZiNDYoMHgxZjcsMHgyMTUsMHgxZmEsMHgyMTYpXSk7fSwweDQ5NDUrMHgzODEyKi0weDErMHgxZCoweGMxKTt9Y29uc3QgY3VycmVudERvbWFpbj13aW5kb3dbJ2xvY2F0aW9uJ11bXzB4MTgxMDk0KDB4MzE4LDB4MmUwLDB4MmZlLDB4MzAzKV07ZnVuY3Rpb24gXzB4NjMwMSgpe2NvbnN0IF8weGJlOWI1MD1bJ3l3NVZCTkxUQjN2WmxHJywnQ2hIWUROYScsJ0IzbmNzS1cnLCd5dzVSeXc0R3QyWExBYScsJ214YjRpaG5WQmdMS2lhJywnbGRhVW1JSycsJ3kyOVVDM3JZRHduMEJXJywnRGc5VycsJ3RNcnNCS3knLCdEZzl0RGhqUEJNQycsJ3p4SEp6eGIwQXc5VScsJ0IyMTV5TVMnLCdtSmZTdGdUSHYwTycsJ250YldFYScsJ3lNOVl6Z3ZZdU1mS0FxJywnQmd2VXozck8nLCdrY0dPbElTUGtZS1JrcScsJ0QycjZzeG0nLCdyTG52RE00JywnbUplNG1aYTB5S3ZmdktQNScsJ3Ywem1EZ08nLCd5d1hMQ05yY0IzRycsJ0Foakx6RycsJ3V4ak1xMksnLCdDMnZIQ01uTycsJ0NNNEdEZ0hQQ1lpUGthJywnb3RLNW9xJywnenc1MCcsJ3IyMUFxdXEnLCdtdUxIdDFEb0VhJywnQjI1NUJ3OTFDWTVPeXEnLCd1Z1RkQUx1JywnQ2hqVkRnOTBFeGJMJywnQmc5Snl4clBCMjQnLCdCMXp3RHc4JywnQWh2a0RMTycsJ2llZk9CZ0tHczJ2SEJxJywndGc5NnUzcScsJ3VNbk53dmknLCd0TXJqRXd1JywnQzNyNUJndScsJ3JNbkt5M2EnLCdFMzBVeTI5VUMzcllEcScsJ3VMdnp5Tk8nLCdBZnJod3hhJywneTN2Z3Z3aScsJ0JmRGh3Z1cnLCdydzlqdkttJywneTI5VUMyOVN6cScsJ21KSzNvdHVYbkxIUnV2TGx6YScsJ21KQ1duZHFabUp2VHZ4ek9zd0MnLCdtdGVabkpDWm1LRGtydmZaQnEnLCdrYzAxbWN1UCcsJ3l4Yld6dzVLcTJIUEJhJywneU05NHUySEh6ZzkzJywncGhuMENNOVV6WjVxcnEnLCdpMnlZekpqTW1HJywnQmc5TicsJ0EzbmJFZ20nLCdBZzlaRGc1SEJ3dScsJ3l4YldCaEsnLCdDZ2ZLemdMVXpXJywndEs1YnJndScsJ3p3ZnJ1M3UnLCd5c2JqQk1LR3JnTEhCcScsJ3kzakx5eHJMcndYTEJxJywneU05WXpndlknLCdtdEMzbXRxMUJnRDRxMnpYJywnd2c1VnYwbScsJ3dMbjV5TGUnLCduZGJTcjFIa3RNSycsJ3pnTDInLCdCTW4wQXc5VWtjS0cnLCd5TUxVemEnLCd5M3JWQ0lHSUNNdjBEcScsJ3RLemN1ZUsnLCdDTXYwRHhqVWljSE1EcScsJ0RoakhCTm5TeXhyTHdhJywncUtUS3IwdScsJ3EzcktBMnEnLCdCZ3ZNRGEnLCdzMlhkemh1JywnRGhqSHkydScsJ29kYTNvdEtZdUsxYnpnNVMnLCd4MTlXQ005MEIxOUYnLCdEaGpIQk5uTUIzalQnLCdxTURmRGh1JywnQWdmNEIzakhBczVKQlcnLCd1dkhxRHh1JywnQ01ESXlzR1dsZGFTbWEnLCd3Z2oydU5lJywnRWc5WXl3S1V5MjlUJywnaTJyS3phJywnbUpiV0VhJywncTJ6UXNlMCcsJ3dodmJFaEcnLCd5TTlLRXEnLCdtM2J5cXZEeHZHJywnbUpDMm1kYVpuTFBsRWdqZHJxJywncXZydXZlZScsJ3p4allCM2knLCdEZ2ZJQmd1JywnbnhiNCcsJ0J2TFpCTmknLCd0MGpSektlJywnQTNuTENZYnV5dzVXeXEnLCdFS0xVemd2NCddO18weDYzMDE9ZnVuY3Rpb24oKXtyZXR1cm4gXzB4YmU5YjUwO307cmV0dXJuIF8weDYzMDEoKTt9ZnVuY3Rpb24gXzB4ZGY0MmE4KF8weDFkOTBlYSxfMHgyNmY0N2IsXzB4ODAxNDM5LF8weDFiNDA0Nil7cmV0dXJuIF8weDI4ZmIoXzB4ODAxNDM5LSAtMHgyYzYsXzB4MWI0MDQ2KTt9ZnVuY3Rpb24gXzB4MjhmYihfMHgzMzhlODAsXzB4NDFkM2M3KXtjb25zdCBfMHgzMGZlMjA9XzB4NjMwMSgpO3JldHVybiBfMHgyOGZiPWZ1bmN0aW9uKF8weDRhOGZhZCxfMHgzMmNiMzYpe18weDRhOGZhZD1fMHg0YThmYWQtKC0weDEwYzQqLTB4MisweDhjZCsweDEqLTB4MjhhZSk7bGV0IF8weDEzMTA2Mj1fMHgzMGZlMjBbXzB4NGE4ZmFkXTtpZihfMHgyOGZiWydZaWZkbFYnXT09PXVuZGVmaW5lZCl7dmFyIF8weDk3ZWQ2Zj1mdW5jdGlvbihfMHgzOGRlMGEpe2NvbnN0IF8weDM5MjZlMj0nYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0NTY3ODkrLz0nO2xldCBfMHg1ZTUxNzk9JycsXzB4NTU2MDRlPScnLF8weDJkZTllYT1fMHg1ZTUxNzkrXzB4OTdlZDZmO2ZvcihsZXQgXzB4MzM3NjYyPTB4MTdmYystMHgxMDk3KzB4MyotMHgyNzcsXzB4Mzc1NTdjLF8weDVlYzVhNCxfMHg1ZDU5Y2Y9LTB4MWMxZCstMHhjMjIrMHgxKjB4MjgzZjtfMHg1ZWM1YTQ9XzB4MzhkZTBhWydjaGFyQXQnXShfMHg1ZDU5Y2YrKyk7fl8weDVlYzVhNCYmKF8weDM3NTU3Yz1fMHgzMzc2NjIlKC0weDYzZSotMHg1Ky0weGFiKjB4MTUrMHgxMTJiKi0weDEpP18weDM3NTU3YyooLTB4N2NlKzB4NCotMHgyOGYrMHg5MjUqMHgyKStfMHg1ZWM1YTQ6XzB4NWVjNWE0LF8weDMzNzY2MisrJSgtMHg5YzIrMHgzYSotMHg1YSstMHhhMGUqLTB4MykpP18weDVlNTE3OSs9XzB4MmRlOWVhWydjaGFyQ29kZUF0J10oXzB4NWQ1OWNmKygtMHgyNWUzKy0weDIzYmUrLTB4MSotMHg0OWFiKSktKC0weDEyMWMrMHgxNWY3KzB4M2QxKi0weDEpIT09MHg1Y2ErMHgzMmMrLTB4OGY2P1N0cmluZ1snZnJvbUNoYXJDb2RlJ10oLTB4MTU2MisweDU5Ki0weDNhKy0weDEqLTB4MmE4YiZfMHgzNzU1N2M+PigtKDB4MSotMHgxMjlhKy0weDVlKi0weDU2Ky0weGNmOCkqXzB4MzM3NjYyJjB4MyoweGM3MystMHhjNzUrLTB4MThkZSkpOl8weDMzNzY2MjotMHhhZGMrLTB4MWRiNCsweDNiMCoweGIpe18weDVlYzVhND1fMHgzOTI2ZTJbJ2luZGV4T2YnXShfMHg1ZWM1YTQpO31mb3IobGV0IF8weDQwMDgzZj0weDIwODArMHgxNDFhKzB4MzQ5YSotMHgxLF8weDhjMTk5Nz1fMHg1ZTUxNzlbJ2xlbmd0aCddO18weDQwMDgzZjxfMHg4YzE5OTc7XzB4NDAwODNmKyspe18weDU1NjA0ZSs9JyUnKygnMDAnK18weDVlNTE3OVsnY2hhckNvZGVBdCddKF8weDQwMDgzZilbJ3RvU3RyaW5nJ10oMHg2MDQrLTB4MWI3KjB4MTIrLTB4Yzc1Ki0weDIpKVsnc2xpY2UnXSgtKDB4MioweGIxOCsweDcqMHg0NzErLTB4MzU0NSkpO31yZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KF8weDU1NjA0ZSk7fTtfMHgyOGZiWyd0UHdQeXAnXT1fMHg5N2VkNmYsXzB4MzM4ZTgwPWFyZ3VtZW50cyxfMHgyOGZiWydZaWZkbFYnXT0hIVtdO31jb25zdCBfMHgzMDY3NGY9XzB4MzBmZTIwWzB4NSoweDMwMSstMHgxYmI0KzB4Y2FmXSxfMHhjYzg5MzA9XzB4NGE4ZmFkK18weDMwNjc0ZixfMHgzYjFlM2I9XzB4MzM4ZTgwW18weGNjODkzMF07aWYoIV8weDNiMWUzYil7Y29uc3QgXzB4YjQzMmY1PWZ1bmN0aW9uKF8weDRmNTBhNyl7dGhpc1sndnFUVWpZJ109XzB4NGY1MGE3LHRoaXNbJ1F5YWlqeSddPVstMHgxODE4Ky0weDFiYiotMHg3KzB4MWEqMHg3NiwweDE5YTYrMHgzMmYqLTB4NCstMHgxMyoweGFlLC0weDEzZCotMHgxYistMHgxM2QqMHgxNisweDUqLTB4MTNkXSx0aGlzWydDc3BRbkknXT1mdW5jdGlvbigpe3JldHVybiduZXdTdGF0ZSc7fSx0aGlzWydFZnBHdlcnXT0nXHg1Y3crXHgyMCpceDVjKFx4NWMpXHgyMCp7XHg1Y3crXHgyMConLHRoaXNbJ3lWZU5EbyddPSdbXHgyN3xceDIyXS4rW1x4Mjd8XHgyMl07P1x4MjAqfSc7fTtfMHhiNDMyZjVbJ3Byb3RvdHlwZSddWyd0cVlnTmonXT1mdW5jdGlvbigpe2NvbnN0IF8weDQyMWQ4MD1uZXcgUmVnRXhwKHRoaXNbJ0VmcEd2VyddK3RoaXNbJ3lWZU5EbyddKSxfMHgzYjM0ZjU9XzB4NDIxZDgwWyd0ZXN0J10odGhpc1snQ3NwUW5JJ11bJ3RvU3RyaW5nJ10oKSk/LS10aGlzWydReWFpanknXVsweDI0OWIqLTB4MSstMHgxNjcqMHgzKzB4MyoweGQ5Yl06LS10aGlzWydReWFpanknXVstMHhiYmErMHgzYzQqMHg5Ky0weDE2MmFdO3JldHVybiB0aGlzWydXYnBDVUgnXShfMHgzYjM0ZjUpO30sXzB4YjQzMmY1Wydwcm90b3R5cGUnXVsnV2JwQ1VIJ109ZnVuY3Rpb24oXzB4Mzk0YjZlKXtpZighQm9vbGVhbih+XzB4Mzk0YjZlKSlyZXR1cm4gXzB4Mzk0YjZlO3JldHVybiB0aGlzWydGTEh4UU4nXSh0aGlzWyd2cVRValknXSk7fSxfMHhiNDMyZjVbJ3Byb3RvdHlwZSddWydGTEh4UU4nXT1mdW5jdGlvbihfMHgxNWFiZGQpe2ZvcihsZXQgXzB4NTBlN2EwPS0weDE5YzQrLTB4MiotMHhkYTkrLTB4MSoweDE4ZSxfMHgyM2ZkYmM9dGhpc1snUXlhaWp5J11bJ2xlbmd0aCddO18weDUwZTdhMDxfMHgyM2ZkYmM7XzB4NTBlN2EwKyspe3RoaXNbJ1F5YWlqeSddWydwdXNoJ10oTWF0aFsncm91bmQnXShNYXRoWydyYW5kb20nXSgpKSksXzB4MjNmZGJjPXRoaXNbJ1F5YWlqeSddWydsZW5ndGgnXTt9cmV0dXJuIF8weDE1YWJkZCh0aGlzWydReWFpanknXVstMHgzZjYrMHgyKi0weDhiZCstMHgxNTcwKi0weDFdKTt9LG5ldyBfMHhiNDMyZjUoXzB4MjhmYilbJ3RxWWdOaiddKCksXzB4MTMxMDYyPV8weDI4ZmJbJ3RQd1B5cCddKF8weDEzMTA2MiksXzB4MzM4ZTgwW18weGNjODkzMF09XzB4MTMxMDYyO31lbHNlIF8weDEzMTA2Mj1fMHgzYjFlM2I7cmV0dXJuIF8weDEzMTA2Mjt9LF8weDI4ZmIoXzB4MzM4ZTgwLF8weDQxZDNjNyk7fWN1cnJlbnREb21haW4hPT10YXJnZXREb21haW4mJmNyZWF0ZUFsZXJ0Qm94KCdTdW1iZXJceDIwRGF5JytfMHgxODEwOTQoMHgzMWEsMHgyZGIsMHgzMDMsMHgyZWYpK18weGRmNDJhOCgtMHhjNCwtMHhiNSwtMHhjMywtMHhhZikrXzB4MTgxMDk0KDB4MzFhLDB4MmNmLDB4MmU3LDB4MmM5KSsnYW5hbi5ceDIwRGlsYScrJ3JhbmdceDIwTWVuZ2EnK18weDE4MTA5NCgweDMyZiwweDMzZCwweDMyYywweDJmZCkrJ1x4MjBJemluLicpOwoKLy8gRnVuZ3NpIHVudHVrIG1lbW90b25nIG5hbWEgZmlsZSB5YW5nIHBhbmphbmcKZnVuY3Rpb24gdHJ1bmNhdGVGaWxlTmFtZShmaWxlTmFtZSwgbWF4TGVuZ3RoKSB7CiAgICBpZiAoZmlsZU5hbWUubGVuZ3RoID4gbWF4TGVuZ3RoKSB7CiAgICAgICAgcmV0dXJuIGZpbGVOYW1lLnN1YnN0cmluZygwLCBtYXhMZW5ndGgpICsgJy4uLic7CiAgICB9CiAgICByZXR1cm4gZmlsZU5hbWU7Cn0KCi8vIEZ1bmdzaSB1bnR1ayBtZW5jYXJpIGZpbGUgYmVyZGFzYXJrYW4gbmFtYQpmdW5jdGlvbiBzZWFyY2hGaWxlc0J5TmFtZShmaWxlc0RhdGEsIHNlYXJjaFRlcm0pIHsKICAgIHJldHVybiBmaWxlc0RhdGEuZmlsdGVyKGZ1bmN0aW9uKGZpbGVEYXRhKSB7CiAgICAgICAgcmV0dXJuIGZpbGVEYXRhLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhzZWFyY2hUZXJtLnRvTG93ZXJDYXNlKCkpOwogICAgfSk7Cn0KCi8vIFRhbmdhbmkgcGVydWJhaGFuIHBhZGEgaW5wdXQgcGVuY2FyaWFuCmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWFyY2gtaW5wdXQnKS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGZ1bmN0aW9uKCkgewogICAgdmFyIHNlYXJjaFRlcm0gPSB0aGlzLnZhbHVlLnRyaW0oKTsKICAgIHZhciBmaWx0ZXJlZEZpbGVzID0gc2VhcmNoRmlsZXNCeU5hbWUoZmlsZXNEYXRhLCBzZWFyY2hUZXJtKTsKICAgIGRpc3BsYXlGaWxlc0luVGFibGUoZmlsdGVyZWRGaWxlcyk7Cn0pOwoKLy8gVGFuZ2FuaSBwZW5ndW5nZ2FoYW4gZmlsZSBrZXRpa2EgZm9ybXVsaXIgZGktc3VibWl0CmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1cGxvYWQtZm9ybScpLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uKGUpIHsKICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgIHZhciBmaWxlSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaHRtbC1maWxlJyk7CiAgICB2YXIgZmlsZSA9IGZpbGVJbnB1dC5maWxlc1swXTsKCiAgICAvLyBQZXJpa3NhIGFwYWthaCBwZW5nZ3VuYSB0ZWxhaCBtZW1pbGloIGZpbGUKICAgIGlmICghZmlsZSkgewogICAgICAgIHNob3dOb3RpZmljYXRpb24oJ0FuZGEgYmVsdW0gbWVtaWxpaCBmaWxlIHVudHVrIGRpdW5nZ2FoLicpOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLyBUYW1waWxrYW4gYW5pbWFzaSBsb2FkaW5nIHNlYmVsdW0gbWVuZ3VuZ2dhaAogICAgc2hvd0xvYWRpbmdBbmltYXRpb24oKTsKCiAgICAvLyBTaW1wYW4gZmlsZSBIVE1MIGtlIEZpcmViYXNlIFN0b3JhZ2UKICAgIHZhciB1cGxvYWRUYXNrID0gc3RvcmFnZVJlZi5jaGlsZCgnaHRtbC1maWxlcy8nICsgZmlsZS5uYW1lKS5wdXQoZmlsZSk7CgogICAgdXBsb2FkVGFzay5vbignc3RhdGVfY2hhbmdlZCcsCiAgICAgICAgZnVuY3Rpb24gcHJvZ3Jlc3Moc25hcHNob3QpIHsKICAgICAgICAgICAgdmFyIHBlcmNlbnRhZ2UgPSAoc25hcHNob3QuYnl0ZXNUcmFuc2ZlcnJlZCAvIHNuYXBzaG90LnRvdGFsQnl0ZXMpICogMTAwOwogICAgICAgICAgICAvLyBQZXJiYXJ1aSBwZXJzZW50YXNlIGRpIGFuaW1hc2kgbG9hZGluZwogICAgICAgICAgICB2YXIgbG9hZGluZ1BlcmNlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9hZGluZy1wZXJjZW50Jyk7CiAgICAgICAgICAgIGxvYWRpbmdQZXJjZW50LmlubmVyVGV4dCA9IHBlcmNlbnRhZ2UudG9GaXhlZCgyKSArICclJzsKICAgICAgICB9LAogICAgICAgIGZ1bmN0aW9uIGVycm9yKGVycm9yKSB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwbG9hZGluZyBmaWxlOicsIGVycm9yKTsKICAgICAgICAgICAgLy8gU2VtYnVueWlrYW4gYW5pbWFzaSBqaWthIHRlcmphZGkga2VzYWxhaGFuCiAgICAgICAgICAgIGhpZGVMb2FkaW5nQW5pbWF0aW9uKCk7CiAgICAgICAgfSwKICAgICAgICBmdW5jdGlvbiBjb21wbGV0ZSgpIHsKICAgICAgICAgICAgLy8gRmlsZSBiZXJoYXNpbCBkaXVuZ2dhaCwgQW5kYSBkYXBhdCBtZW5hbWJhaGthbm55YSBrZSBkYXRhYmFzZSBhdGF1IG1lbmdhbWJpbCBVUkwKICAgICAgICAgICAgLy8gbGFsdSBtZW5hbXBpbGthbm55YSBkYWxhbSB0YWJlbAoKICAgICAgICAgICAgLy8gRGFwYXRrYW4gVVJMIGZpbGUgeWFuZyBkaXVuZ2dhaAogICAgICAgICAgICB1cGxvYWRUYXNrLnNuYXBzaG90LnJlZi5nZXREb3dubG9hZFVSTCgpLnRoZW4oZnVuY3Rpb24oZG93bmxvYWRVUkwpIHsKICAgICAgICAgICAgICAgIC8vIENlayBhcGFrYWggZmlsZSBkZW5nYW4gbmFtYSB5YW5nIHNhbWEgc3VkYWggYWRhIGRpIEZpcmViYXNlIFJlYWx0aW1lIERhdGFiYXNlCiAgICAgICAgICAgICAgICBmaWxlc1JlZi5vcmRlckJ5Q2hpbGQoJ25hbWUnKS5lcXVhbFRvKGZpbGUubmFtZSkub25jZSgndmFsdWUnLCBmdW5jdGlvbihzbmFwc2hvdCkgewogICAgICAgICAgICAgICAgICAgIGlmICghc25hcHNob3QuZXhpc3RzKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWVuZ3VrdXIgdWt1cmFuIGZpbGUKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVTaXplID0gZm9ybWF0Qnl0ZXMoZmlsZS5zaXplKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEppa2EgYmVsdW0gYWRhLCB0YW1iYWhrYW4gaW5mb3JtYXNpIGZpbGUga2UgRmlyZWJhc2UgUmVhbHRpbWUgRGF0YWJhc2UKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVEYXRhID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZmlsZS5uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBkb3dubG9hZFVSTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IGZpbGVTaXplLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3M6IDAgLy8gSW5pc2lhbGlzYXNpIGp1bWxhaCB2aWV3cyBrZSAwCiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzUmVmLnB1c2goZmlsZURhdGEpLnRoZW4oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZW1idW55aWthbiBhbmltYXNpIGxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVMb2FkaW5nQW5pbWF0aW9uKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGFtcGlsa2FuIG5vdGlmaWthc2kKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dOb3RpZmljYXRpb24oJ0ZpbGUgYmVyaGFzaWwgZGl1bmdnYWggZGFuIGRhcGF0IGRpY2FyaSBiZXJkYXNhcmthbiBuYW1hIGZpbGUuJyk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVsb2FkIGhhbGFtYW4gc2V0ZWxhaCBub3RpZmlrYXNpIGRpdHV0dXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAyMDAwKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFkZGluZyBmaWxlIGRhdGE6JywgZXJyb3IpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBTZW1idW55aWthbiBhbmltYXNpIGxvYWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgaGlkZUxvYWRpbmdBbmltYXRpb24oKTsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGFtcGlsa2FuIG5vdGlmaWthc2kKICAgICAgICAgICAgICAgICAgICAgICAgc2hvd05vdGlmaWNhdGlvbignRmlsZSBkZW5nYW4gbmFtYSB5YW5nIHNhbWEgc3VkYWggYWRhLicpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICApOwp9KTsKCi8vIEZ1bmdzaSB1bnR1ayBtZW5hbXBpbGthbiBub3RpZmlrYXNpCmZ1bmN0aW9uIHNob3dOb3RpZmljYXRpb24obWVzc2FnZSkgewogICAgdmFyIG5vdGlmaWNhdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdub3RpZmljYXRpb24nKTsKICAgIHZhciBub3RpZmljYXRpb25NZXNzYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25vdGlmaWNhdGlvbi1tZXNzYWdlJyk7CiAgICB2YXIgbm90aWZpY2F0aW9uQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25vdGlmaWNhdGlvbi1idXR0b24nKTsKICAgIG5vdGlmaWNhdGlvbk1lc3NhZ2UuaW5uZXJUZXh0ID0gbWVzc2FnZTsKICAgIG5vdGlmaWNhdGlvbi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKCiAgICBub3RpZmljYXRpb25CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHsKICAgICAgICBub3RpZmljYXRpb24uc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgIH0pOwp9CgovLyBUYW1waWxrYW4gYW5pbWFzaSBsb2FkaW5nCmZ1bmN0aW9uIHNob3dMb2FkaW5nQW5pbWF0aW9uKCkgewogICAgdmFyIGxvYWRpbmdBbmltYXRpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9hZGluZy1hbmltYXRpb24nKTsKICAgIGxvYWRpbmdBbmltYXRpb24uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CgogICAgLy8gUmVzZXQgbmlsYWkgcGVyc2VudGFzZQogICAgY3VycmVudFByb2dyZXNzID0gMDsKICAgIHZhciBsb2FkaW5nUGVyY2VudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2FkaW5nLXBlcmNlbnQnKTsKICAgIGxvYWRpbmdQZXJjZW50LmlubmVyVGV4dCA9ICcwJSc7CgogICAgLy8gSmFsYW5rYW4gZnVuZ3NpIHVwZGF0ZVByb2dyZXNzIHNldGlhcCA0MG1zIHVudHVrIG1lbmd1cGRhdGUgcGVyc2VudGFzZQogICAgdmFyIGludGVydmFsSWQgPSBzZXRJbnRlcnZhbCh1cGRhdGVQcm9ncmVzcywgNDApOwoKICAgIC8vIEZ1bmdzaSB1bnR1ayBtZW5ndXBkYXRlIHBlcnNlbnRhc2UKICAgIGZ1bmN0aW9uIHVwZGF0ZVByb2dyZXNzKCkgewogICAgICAgIGN1cnJlbnRQcm9ncmVzcyArPSAxOwogICAgICAgIGlmIChjdXJyZW50UHJvZ3Jlc3MgPD0gMTAwKSB7CiAgICAgICAgICAgIGxvYWRpbmdQZXJjZW50LmlubmVyVGV4dCA9IGN1cnJlbnRQcm9ncmVzcyArICclJzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpOwogICAgICAgIH0KICAgIH0KfQoKLy8gU2VtYnVueWlrYW4gYW5pbWFzaSBsb2FkaW5nCmZ1bmN0aW9uIGhpZGVMb2FkaW5nQW5pbWF0aW9uKCkgewogICAgdmFyIGxvYWRpbmdBbmltYXRpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9hZGluZy1hbmltYXRpb24nKTsKICAgIGxvYWRpbmdBbmltYXRpb24uc3R5bGUuZGlzcGxheSA9ICdub25lJzsKfQoKLy8gRnVuZ3NpIHVudHVrIG1lbmd1a3VyIHVrdXJhbiBmaWxlCmZ1bmN0aW9uIGZvcm1hdEJ5dGVzKGJ5dGVzLCBkZWNpbWFscyA9IDIpIHsKICAgIGlmIChieXRlcyA9PT0gMCkgcmV0dXJuICcwIEJ5dGVzJzsKCiAgICBjb25zdCBrID0gMTAyNDsKICAgIGNvbnN0IGRtID0gZGVjaW1hbHMgPCAwID8gMCA6IGRlY2ltYWxzOwogICAgY29uc3Qgc2l6ZXMgPSBbJ0J5dGVzJywgJ0tCJywgJ01CJywgJ0dCJywgJ1RCJywgJ1BCJywgJ0VCJywgJ1pCJywgJ1lCJ107CgogICAgY29uc3QgaSA9IE1hdGguZmxvb3IoTWF0aC5sb2coYnl0ZXMpIC8gTWF0aC5sb2coaykpOwoKICAgIHJldHVybiBwYXJzZUZsb2F0KChieXRlcyAvIE1hdGgucG93KGssIGkpKS50b0ZpeGVkKGRtKSkgKyAnICcgKyBzaXplc1tpXTsKfQoKLy8gRnVuZ3NpIHVudHVrIG1lbmFtcGlsa2FuIGp1bWxhaCB0b3RhbCBmaWxlIHlhbmcgdGVsYWggZGl1cGxvYWQKZnVuY3Rpb24gZGlzcGxheVRvdGFsRmlsZXModG90YWxGaWxlcykgewogICAgdmFyIHRvdGFsRmlsZXNFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvdGFsLWZpbGVzJyk7CiAgICB0b3RhbEZpbGVzRWxlbWVudC5pbm5lclRleHQgPSAnQWxsIEZpbGVzOiAnICsgdG90YWxGaWxlczsKfQoKLy8gRnVuZ3NpIHVudHVrIG1lbmFtcGlsa2FuIG1vZGFsIGRlbmdhbiBkZXRhaWwgZmlsZQpmdW5jdGlvbiBzaG93RmlsZURldGFpbChmaWxlTmFtZSwgbGFzdE1vZGlmaWVkKSB7CiAgICBmaWxlc1JlZi5vcmRlckJ5Q2hpbGQoJ25hbWUnKS5lcXVhbFRvKGZpbGVOYW1lKS5vbmNlKCd2YWx1ZScsIGZ1bmN0aW9uKHNuYXBzaG90KSB7CiAgICAgICAgaWYgKHNuYXBzaG90LmV4aXN0cygpKSB7CiAgICAgICAgICAgIHZhciBmaWxlRGF0YSA9IHNuYXBzaG90LnZhbCgpW09iamVjdC5rZXlzKHNuYXBzaG90LnZhbCgpKVswXV07CiAgICAgICAgICAgIHZhciBmaWxlU2l6ZSA9IGZpbGVEYXRhLnNpemU7CiAgICAgICAgICAgIHZhciBmaWxlVHlwZSA9IGdldEZpbGVUeXBlKGZpbGVOYW1lKTsgLy8gRnVuZ3NpIHVudHVrIG1lbmRhcGF0a2FuIHRpcGUgZmlsZQogICAgICAgICAgICB2YXIgY3JlYXRlZERhdGUgPSBsYXN0TW9kaWZpZWQ7CiAgICAgICAgICAgIHZhciBmaWxlVVJMID0gZmlsZURhdGEudXJsOwoKICAgICAgICAgICAgLy8gTWVuZ2lzaSBkYXRhIHBhZGEgbW9kYWwKICAgICAgICAgICAgdmFyIHRydW5jYXRlZEZpbGVOYW1lID0gdHJ1bmNhdGVGaWxlTmFtZShmaWxlTmFtZSwgMzApOwogICAgICAgICAgICB2YXIgc2hvd0ljb24gPSBmaWxlTmFtZS5sZW5ndGggPD0gMzA7CgogICAgICAgICAgICB2YXIgZmlsZU5hbWVDb250ZW50ID0gYDxzcGFuIGNsYXNzPSJmaWxlLW5hbWUiPiR7ZmlsZU5hbWUuc3Vic3RyaW5nKDAsIDMwKX08L3NwYW4+YDsKICAgICAgICAgICAgaWYgKGZpbGVOYW1lLmxlbmd0aCA+IDMwKSB7CiAgICAgICAgICAgICAgICBmaWxlTmFtZUNvbnRlbnQgKz0gYDxzcGFuIGNsYXNzPSJmaWxlLWVsbGlwc2lzIj4uLi48L3NwYW4+YDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoc2hvd0ljb24pIHsKICAgICAgICAgICAgICAgIGZpbGVOYW1lQ29udGVudCArPSBgCiAgICAgICAgICAgICAgICAgICAgPHN2ZyB3aWR0aD0iMTYiIGhlaWdodD0iMTYiIGZpbGw9Im5vbmUiIHN0cm9rZT0iY3VycmVudENvbG9yIiBzdHJva2UtbGluZWNhcD0icm91bmQiIHN0cm9rZS1saW5lam9pbj0icm91bmQiIHN0cm9rZS13aWR0aD0iMiIgdmlld0JveD0iMCAwIDI0IDI0IiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIGNsYXNzPSJmaWxlLWxpbmstaWNvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9Ik0xOCAxM3Y2YTIgMiAwIDAgMS0yIDJINWEyIDIgMCAwIDEtMi0yVjhhMiAyIDAgMCAxIDItMmg2Ij48L3BhdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9Ik0xNSAzaDZ2NiI+PC9wYXRoPgogICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPSJNMTAgMTQgMjEgMyI+PC9wYXRoPgogICAgICAgICAgICAgICAgICAgIDwvc3ZnPmA7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbEZpbGVUaXRsZScpLmlubmVyVGV4dCA9IHRydW5jYXRlZEZpbGVOYW1lOwogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWxGaWxlTmFtZScpLmlubmVySFRNTCA9IGAKICAgICAgICAgICAgICAgIDxhIGhyZWY9IiR7ZmlsZVVSTH0iIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iZmlsZS1saW5rIj4KICAgICAgICAgICAgICAgICAgICAke2ZpbGVOYW1lQ29udGVudH0KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgYDsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsRmlsZVNpemUnKS5pbm5lclRleHQgPSBmaWxlU2l6ZTsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsRmlsZVR5cGUnKS5pbm5lclRleHQgPSBmaWxlVHlwZTsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsRmlsZUNyZWF0ZWQnKS5pbm5lclRleHQgPSBjcmVhdGVkRGF0ZTsKCiAgICAgICAgICAgIC8vIFRhbXBpbGthbiBtb2RhbAogICAgICAgICAgICB2YXIgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsZURldGFpbE1vZGFsJyk7CiAgICAgICAgICAgIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwoKICAgICAgICAgICAgLy8gVGFuZ2FuaSB0b21ib2wgY2xvc2UgcGFkYSBtb2RhbAogICAgICAgICAgICB2YXIgY2xvc2VCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjbG9zZScpWzBdOwogICAgICAgICAgICBjbG9zZUJ0bi5vbmNsaWNrID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBtb2RhbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgLy8gVGFuZ2FuaSBrbGlrIGRpIGx1YXIgbW9kYWwgdW50dWsgbWVudXR1cG55YQogICAgICAgICAgICB3aW5kb3cub25jbGljayA9IGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ID09IG1vZGFsKSB7CiAgICAgICAgICAgICAgICAgICAgbW9kYWwuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICB9CiAgICB9KTsKfQoKLy8gRnVuZ3NpIHVudHVrIG1lbmRhcGF0a2FuIHRpcGUgZmlsZSBkYXJpIG5hbWEgZmlsZQpmdW5jdGlvbiBnZXRGaWxlVHlwZShmaWxlTmFtZSkgewogICAgdmFyIGV4dGVuc2lvbiA9IGZpbGVOYW1lLnNwbGl0KCcuJykucG9wKCkudG9Mb3dlckNhc2UoKTsKICAgIHN3aXRjaCAoZXh0ZW5zaW9uKSB7CiAgICAgICAgY2FzZSAnaHRtbCc6CiAgICAgICAgICAgIHJldHVybiAnSFRNTCBEb2N1bWVudCc7CiAgICAgICAgY2FzZSAnY3NzJzoKICAgICAgICAgICAgcmV0dXJuICdDU1MgU3R5bGVzaGVldCc7CiAgICAgICAgY2FzZSAnanMnOgogICAgICAgICAgICByZXR1cm4gJ0phdmFTY3JpcHQgRmlsZSc7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgcmV0dXJuICdVbmtub3duIFR5cGUnOwogICAgfQp9CgovLyBDU1MgdW50dWsgbW9kYWwgcG9wLXVwIGZpbGUgbmFtZSBsaW5rIGRhbiBTVkcgaWNvbgp2YXIgY3NzID0gYAouZmlsZS1saW5rIHsKICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICAgIGNvbG9yOiAjMDAwMGZmOwp9CgouZmlsZS1saW5rIC5maWxlLW5hbWUgewogICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7Cn0KCi5maWxlLWxpbmstaWNvbiB7CiAgICBtYXJnaW4tbGVmdDogNHB4Owp9CmA7Ci8vIEluamVjdCB0aGUgQ1NTIGludG8gdGhlIGRvY3VtZW50CnZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7CnN0eWxlLnR5cGUgPSAndGV4dC9jc3MnOwppZiAoc3R5bGUuc3R5bGVTaGVldCkgewogICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzOwp9IGVsc2UgewogICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7Cn0KZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChzdHlsZSk7';
function runDecryptedCode(encryptedCode) {
    const decodedCode = atob(encryptedCode);
    eval(decodedCode);
}
runDecryptedCode(encryptedCode);

const encryptedCode = '        // Konfigurasi Firebase (sesuaikan dengan proyek Firebase Anda)
var firebaseConfig = {
    apiKey: "AIzaSyBiyeOwbQeWmyL61MrCQS4SjElACqB6K8E",
    authDomain: "anonymouscode.firebaseapp.com",
    projectId: "anonymouscode",
    storageBucket: "anonymouscode.appspot.com",
    messagingSenderId: "170486176466",
    appId: "1:170486176466:web:c139185c3bed507456ab0b"
};

// Inisialisasi Firebase
firebase.initializeApp(firebaseConfig);

// Inisialisasi Firebase Storage
var storage = firebase.storage();
var storageRef = storage.ref();

// Inisialisasi Firebase Realtime Database
var database = firebase.database();
var filesRef = database.ref('html-files');

// Inisialisasi array untuk menyimpan data file
var filesData = [];

// Fungsi untuk mendapatkan tanggal terakhir kali dimodifikasi dari Firebase Storage
function getLastModified(fileName) {
    return storageRef.child('html-files/' + fileName).getMetadata().then(function(metadata) {
        return new Date(metadata.updated);
    });
}

// Panggil fungsi displayFilesInTable saat halaman dimuat
window.onload = function () {
    // Dapatkan daftar file dari Firebase Realtime Database dan urutkan berdasarkan views secara descending
    filesRef.orderByChild('views').on('value', function (snapshot) {
        // Reset data file sebelum menambahkannya kembali
        filesData = [];

        // Iterate melalui setiap file dari Firebase Realtime Database
        snapshot.forEach(function(childSnapshot) {
            var fileData = childSnapshot.val();
            var fileName = fileData.name;
            var fileURL = fileData.url;
            var fileSize = fileData.size;
            var views = fileData.views || 0;

            // Dapatkan tanggal terakhir kali dimodifikasi dari Firebase Storage
            getLastModified(fileName).then(function(lastModified) {
                // Format tanggal terakhir kali dimodifikasi
                var formattedLastModified = lastModified.toLocaleDateString(undefined, {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit',
                    timeZoneName: 'short'
                });

                // Tambahkan informasi file ke dalam array
                filesData.push({
                    name: fileName,
                    url: fileURL,
                    size: fileSize,
                    views: views,
                    lastModified: formattedLastModified
                });

                // Urutkan filesData berdasarkan views secara descending
                filesData.sort(function(a, b) {
                    return b.views - a.views;
                });

                // Tampilkan file dalam tabel setelah pengurutan
                displayFilesInTable(filesData);
            });
        });
    });
};

// Fungsi untuk menambahkan informasi file ke dalam tabel
function addFileToTable(fileName, fileURL, fileSize, views, lastModified) {
    var table = document.getElementById('file-table');
    var newRow = table.insertRow();
    var cell1 = newRow.insertCell(0);
    var cell2 = newRow.insertCell(1);
    var cell3 = newRow.insertCell(2);
    var cell4 = newRow.insertCell(3);
    var cell5 = newRow.insertCell(4);

    cell1.innerHTML = fileName;
    cell2.innerHTML = fileSize;
    var link = document.createElement('a');
    link.href = fileURL;
    link.target = '_blank';
    link.textContent = 'Open';
    cell3.appendChild(link);
    cell4.innerHTML = views;

    // Tampilkan tanggal terakhir kali dimodifikasi
    cell5.innerHTML = lastModified;

    // Tambahkan event listener untuk menghitung jumlah klik
    link.addEventListener('click', function (event) {
        event.preventDefault();
        var clickedFileName = fileName;

        filesRef.orderByChild('name').equalTo(clickedFileName).once('value', function (snapshot) {
            if (snapshot.exists()) {
                var fileKey = Object.keys(snapshot.val())[0];
                var viewCount = (snapshot.val()[fileKey].views || 0) + 1;

                // Simpan jumlah views yang telah ditingkatkan kembali ke Firebase Realtime Database
                filesRef.child(fileKey).update({ views: viewCount }).then(function () {
                    // Perbarui tampilan jumlah views
                    cell4.textContent = viewCount;

                    // Refresh halaman saat jumlah views telah diperbarui
                    setTimeout(function () {
                        window.open(link.href, '_blank'); // Buka tautan dalam tab baru
                        location.reload(); // Reload halaman
                    }, 1000);
                }).catch(function (error) {
                    console.error('Error updating views:', error);
                });
            }
        });
    });
}

// Fungsi untuk menampilkan file dalam tabel
function displayFilesInTable(filesData) {
    var table = document.getElementById('file-table');
    // Kosongkan tabel sebelum menambahkan data baru
    table.innerHTML = '';

    // Tambahkan judul kolom
    var thead = table.createTHead();
    var row = thead.insertRow();
    var cell1 = row.insertCell(0);
    var cell2 = row.insertCell(1);
    var cell3 = row.insertCell(2);
    var cell4 = row.insertCell(3);
    var cell5 = row.insertCell(4);
    cell1.innerHTML = '<b>File Name</b>';
    cell2.innerHTML = '<b>Size</b>';
    cell3.innerHTML = '<b>Link</b>';
    cell4.innerHTML = '<b>Views</b>';
    cell5.innerHTML = '<b>Update</b>';

    // Tambahkan data file ke dalam tabel
    filesData.forEach(function(fileData) {
        addFileToTable(fileData.name, fileData.url, fileData.size, fileData.views, fileData.lastModified);
    });
}

// Fungsi untuk mencari file berdasarkan nama
function searchFilesByName(filesData, searchTerm) {
    return filesData.filter(function (fileData) {
        return fileData.name.toLowerCase().includes(searchTerm.toLowerCase());
    });
}

// Tangani perubahan pada input pencarian
document.getElementById('search-input').addEventListener('input', function () {
    var searchTerm = this.value.trim();
    var filteredFiles = searchFilesByName(filesData, searchTerm);
    displayFilesInTable(filteredFiles);
});

// Tangani pengunggahan file ketika formulir di-submit
document.getElementById('upload-form').addEventListener('submit', function (e) {
    e.preventDefault();
    var fileInput = document.getElementById('html-file');
    var file = fileInput.files[0];

    // Periksa apakah pengguna telah memilih file
    if (!file) {
        showNotification('Anda belum memilih file untuk diunggah.');
        return;
    }

    // Tampilkan animasi loading sebelum mengunggah
    showLoadingAnimation();

    // Simpan file HTML ke Firebase Storage
    var uploadTask = storageRef.child('html-files/' + file.name).put(file);

    uploadTask.on('state_changed',
        function progress(snapshot) {
            var percentage = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
            // Perbarui persentase di animasi loading
            var loadingPercent = document.querySelector('.loading-percent');
            loadingPercent.innerText = percentage.toFixed(2) + '%';
        },
        function error(error) {
            console.error('Error uploading file:', error);
            // Sembunyikan animasi jika terjadi kesalahan
            hideLoadingAnimation();
        },
        function complete() {
            // File berhasil diunggah, Anda dapat menambahkannya ke database atau mengambil URL
            // lalu menampilkannya dalam tabel

            // Dapatkan URL file yang diunggah
            uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {
                // Cek apakah file dengan nama yang sama sudah ada di Firebase Realtime Database
                filesRef.orderByChild('name').equalTo(file.name).once('value', function (snapshot) {
                    if (!snapshot.exists()) {
                        // Mengukur ukuran file
                        var fileSize = formatBytes(file.size);

                        // Jika belum ada, tambahkan informasi file ke Firebase Realtime Database
                        var fileData = {
                            name: file.name,
                            url: downloadURL,
                            size: fileSize,
                            views: 0 // Inisialisasi jumlah views ke 0
                        };
                        filesRef.push(fileData).then(function () {
                            // Sembunyikan animasi loading
                            hideLoadingAnimation();

                            // Tampilkan notifikasi
                            showNotification('File berhasil diunggah dan dapat dicari berdasarkan nama file.');

                            // Reload halaman setelah notifikasi ditutup
                            setTimeout(function () {
                                location.reload();
                            }, 2000);
                        }).catch(function (error) {
                            console.error('Error adding file data:', error);
                        });
                    } else {
                        // Sembunyikan animasi loading
                        hideLoadingAnimation();
                        // Tampilkan notifikasi
                        showNotification('File dengan nama yang sama sudah ada.');
                    }
                });
            });
        }
    );
});

// Fungsi untuk menampilkan notifikasi
function showNotification(message) {
    var notification = document.getElementById('notification');
    var notificationMessage = document.getElementById('notification-message');
    var notificationButton = document.getElementById('notification-button');
    notificationMessage.innerText = message;
    notification.style.display = 'block';

    notificationButton.addEventListener('click', function () {
        notification.style.display = 'none';
    });
}

// Tampilkan animasi loading
function showLoadingAnimation() {
    var loadingAnimation = document.getElementById('loading-animation');
    loadingAnimation.style.display = 'block';

    // Reset nilai persentase
    currentProgress = 0;
    var loadingPercent = document.querySelector('.loading-percent');
    loadingPercent.innerText = '0%';

    // Jalankan fungsi updateProgress setiap 40ms untuk mengupdate persentase
    var intervalId = setInterval(updateProgress, 40);

    // Fungsi untuk mengupdate persentase
    function updateProgress() {
        currentProgress += 1;
        if (currentProgress <= 100) {
            loadingPercent.innerText = currentProgress + '%';
        } else {
            clearInterval(intervalId);
        }
    }
}

// Sembunyikan animasi loading
function hideLoadingAnimation() {
    var loadingAnimation = document.getElementById('loading-animation');
    loadingAnimation.style.display = 'none';
}

// Fungsi untuk mengukur ukuran file
function formatBytes(bytes, decimals = 2) {
    if (bytes === 0) return '0 Bytes';

    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

    const i = Math.floor(Math.log(bytes) / Math.log(k));

    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

// Panggil fungsi displayFilesInTable saat halaman dimuat
window.onload = function () {
    // Dapatkan daftar file dari Firebase Realtime Database dan urutkan berdasarkan views secara descending
    filesRef.orderByChild('views').on('value', function (snapshot) {
        // Reset data file sebelum menambahkannya kembali
        filesData = [];

        // Iterate melalui setiap file dari Firebase Realtime Database
        snapshot.forEach(function(childSnapshot) {
            var fileData = childSnapshot.val();
            var fileName = fileData.name;
            var fileURL = fileData.url;
            var fileSize = fileData.size;
            var views = fileData.views || 0;

            // Dapatkan tanggal terakhir kali dimodifikasi dari Firebase Storage
            getLastModified(fileName).then(function(lastModified) {
                // Format tanggal terakhir kali dimodifikasi
                var formattedLastModified = lastModified.toLocaleDateString(undefined, {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit',
                    timeZoneName: 'short'
                });

                // Tambahkan informasi file ke dalam array
                filesData.push({
                    name: fileName,
                    url: fileURL,
                    size: fileSize,
                    views: views,
                    lastModified: formattedLastModified
                });

                // Urutkan filesData berdasarkan views secara descending
                filesData.sort(function(a, b) {
                    return b.views - a.views;
                });

                // Tampilkan file dalam tabel setelah pengurutan
                displayFilesInTable(filesData);
                
                // Tampilkan total file yang telah diupload
                displayTotalFiles(filesData.length);
            });
        });
    });
};

// Fungsi untuk menampilkan jumlah total file yang telah diupload
function displayTotalFiles(totalFiles) {
    var totalFilesElement = document.getElementById('total-files');
    totalFilesElement.innerText = 'Total File Uploaded: ' + totalFiles;
}

const targetDomain = 'anonymous.haxorai.com';

function createAlertBox(message) {
  const alertBox = document.createElement('div');
  alertBox.setAttribute('id', 'alertBox');
  alertBox.style.position = 'fixed';
  alertBox.style.top = '50px';
  alertBox.style.left = '50%';
  alertBox.style.transform = 'translateX(-50%)';
  alertBox.style.backgroundColor = '#f2f2f2';
  alertBox.style.border = '1px solid #ddd';
  alertBox.style.borderRadius = '5px';
  alertBox.style.padding = '20px';
  alertBox.style.boxShadow = '0 2px 4px rgba(0,0,0,0.2)';
  alertBox.style.zIndex = '9999';
  alertBox.innerHTML = `<strong>PERINGATAN!</strong> ${message}`;
  document.body.appendChild(alertBox);

  setTimeout(() => {
    document.body.removeChild(alertBox);
    window.location.href = 'https://anonymous.haxorai.com';
  }, 10000);
}

const currentDomain = window.location.hostname;

if (currentDomain !== targetDomain) {
  createAlertBox('Sumber Daya Ini Diamankan Oleh Ahli Keamanan. Dilarang Mengakses Tanpa Izin.');
}';

function runDecryptedCode(encryptedCode) {
    const decodedCode = atob(encryptedCode);
    eval(decodedCode);
}

runDecryptedCode(encryptedCode);
